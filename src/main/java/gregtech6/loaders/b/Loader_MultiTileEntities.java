/**
 * Copyright (c) 2020 Gregorius Techneticies
 *
 * This file is part of gregtech6.
 *
 * GregTech is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GregTech is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with gregtech6. If not, see <http://www.gnu.org/licenses/>.
 */

package gregtech6.loaders.b;

import static gregapi6.data.CS.*;

import gregapi6.block.MaterialMachines;
import gregapi6.block.MaterialScoopable;
import gregapi6.block.multitileentity.MultiTileEntityBlock;
import gregapi6.block.multitileentity.MultiTileEntityRegistry;
import gregapi6.block.multitileentity.example.MultiTileEntityChest;
import gregapi6.data.ANY;
import gregapi6.data.CS;
import gregapi6.data.CS.BlocksGT;
import gregapi6.data.CS.PlankData;
import gregapi6.data.FM;
import gregapi6.data.IL;
import gregapi6.data.MD;
import gregapi6.data.MT;
import gregapi6.data.OD;
import gregapi6.data.OP;
import gregapi6.data.RM;
import gregapi6.data.TC;
import gregapi6.data.TD;
import gregapi6.oredict.OreDictManager;
import gregapi6.oredict.OreDictMaterial;
import gregapi6.tileentity.inventories.MultiTileEntityBookShelf;
import gregapi6.tileentity.multiblocks.MultiTileEntityMultiBlockPart;
import gregapi6.tileentity.tools.MultiTileEntityAdvancedCraftingTable;
import gregapi6.tileentity.tools.MultiTileEntityChargingCraftingTable;
import gregapi6.util.CR;
import gregapi6.util.OM;
import gregapi6.util.ST;
import gregapi6.util.UT;
import gregtech6.items.behaviors.Behavior_MultiblockBuilder;
import gregtech6.tileentity.autotools.MultiTileEntityAutoToolHammer;
import gregtech6.tileentity.autotools.MultiTileEntityAutoToolIgniter;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEU128;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEU2048;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEU32;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEU512;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEU8;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUIV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEULuV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUMAX;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUOmega;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUPUV1;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUPUV2;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUPUV3;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUPUV4;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUPUV5;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUUV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryAdvEUZPM;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEU128;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEU2048;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEU32;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEU512;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEU8;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUIV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEULuV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUMAX;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUOmega;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUPUV1;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUPUV2;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUPUV3;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUPUV4;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUPUV5;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUUV;
import gregtech6.tileentity.batteries.eu.MultiTileEntityBatteryEUZPM;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU128;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU2048;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU32;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU512;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU8;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLU8192;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLULuV;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUMAX;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUOmega;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUPUV1;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUPUV2;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUPUV3;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUPUV4;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUPUV5;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUUV;
import gregtech6.tileentity.batteries.lu.MultiTileEntityBatteryLUZPM;
import gregtech6.tileentity.batteries.qu.MultiTileEntityZPM;
import gregtech6.tileentity.computer.MultiTileEntityHDDSwitch;
import gregtech6.tileentity.computer.MultiTileEntityUSBSwitch;
import gregtech6.tileentity.energy.converters.MultiTileEntityBoilerTank;
import gregtech6.tileentity.energy.converters.MultiTileEntityCoolerElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityCoolerFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityDynamoElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityDynamoFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityEngineElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityEngineFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityEngineSteam;
import gregtech6.tileentity.energy.converters.MultiTileEntityHeaterElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityHeaterFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityLaserAbsorberElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityLaserBuildcraft;
import gregtech6.tileentity.energy.converters.MultiTileEntityLaserElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityLaserFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityMagnetElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityMagnetFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityMotorElectric;
import gregtech6.tileentity.energy.converters.MultiTileEntityMotorFlux;
import gregtech6.tileentity.energy.converters.MultiTileEntityQuantumEnergizerLaser;
import gregtech6.tileentity.energy.converters.MultiTileEntityTurbineSteam;
import gregtech6.tileentity.energy.generators.MultiTileEntityGeneratorFluidBed;
import gregtech6.tileentity.energy.generators.MultiTileEntityGeneratorGas;
import gregtech6.tileentity.energy.generators.MultiTileEntityGeneratorHotFluid;
import gregtech6.tileentity.energy.generators.MultiTileEntityGeneratorLiquid;
import gregtech6.tileentity.energy.generators.MultiTileEntityGeneratorSolid;
import gregtech6.tileentity.energy.generators.MultiTileEntityLightCollectionDevice;
import gregtech6.tileentity.energy.generators.MultiTileEntityMotorLiquid;
import gregtech6.tileentity.energy.generators.MultiTileEntitySolarPanelElectric;
import gregtech6.tileentity.energy.reactors.MultiTileEntityReactorRodBreeder;
import gregtech6.tileentity.energy.reactors.MultiTileEntityReactorRodDepleted;
import gregtech6.tileentity.energy.reactors.MultiTileEntityReactorRodNuclear;
import gregtech6.tileentity.energy.storage.MultiTileEntityBatteryBox;
import gregtech6.tileentity.energy.storage.MultiTileEntityBatteryBoxLarge;
import gregtech6.tileentity.energy.storage.MultiTileEntityCrystalCharger;
import gregtech6.tileentity.energy.storage.MultiTileEntityCrystalChargerLarge;
import gregtech6.tileentity.energy.storage.MultiTileEntityZPMDechargerEU;
import gregtech6.tileentity.energy.storage.MultiTileEntityZPMDechargerQU;
import gregtech6.tileentity.energy.transformers.MultiTileEntityLongDistanceTransformer;
import gregtech6.tileentity.energy.transformers.MultiTileEntityTransformerElectric;
import gregtech6.tileentity.inventories.MultiTileEntityDrawerQuad;
import gregtech6.tileentity.inventories.MultiTileEntityHopper;
import gregtech6.tileentity.inventories.MultiTileEntityLocker;
import gregtech6.tileentity.inventories.MultiTileEntityLockerCharging;
import gregtech6.tileentity.inventories.MultiTileEntityLongDistancePipelineItem;
import gregtech6.tileentity.inventories.MultiTileEntityMassStorageBarrel;
import gregtech6.tileentity.inventories.MultiTileEntityMassStorageBox;
import gregtech6.tileentity.inventories.MultiTileEntityMassStorageLogistics;
import gregtech6.tileentity.inventories.MultiTileEntityMassStorageStandard;
import gregtech6.tileentity.inventories.MultiTileEntityQueueHopper;
import gregtech6.tileentity.inventories.MultiTileEntitySafeKeyLocked;
import gregtech6.tileentity.inventories.MultiTileEntitySafeMechanical;
import gregtech6.tileentity.inventories.MultiTileEntityStorageInserter;
import gregtech6.tileentity.multiblocks.MultiTileEntityAutoclave;
import gregtech6.tileentity.multiblocks.MultiTileEntityBath;
import gregtech6.tileentity.multiblocks.MultiTileEntityBedrockDrill;
import gregtech6.tileentity.multiblocks.MultiTileEntityCentrifuge;
import gregtech6.tileentity.multiblocks.MultiTileEntityCoagulator;
import gregtech6.tileentity.multiblocks.MultiTileEntityCokeOven;
import gregtech6.tileentity.multiblocks.MultiTileEntityCrackingTower;
import gregtech6.tileentity.multiblocks.MultiTileEntityCrucible;
import gregtech6.tileentity.multiblocks.MultiTileEntityCrusher;
import gregtech6.tileentity.multiblocks.MultiTileEntityCryoDistillationTower;
import gregtech6.tileentity.multiblocks.MultiTileEntityCrystallisationRoom;
import gregtech6.tileentity.multiblocks.MultiTileEntityDistillationTower;
import gregtech6.tileentity.multiblocks.MultiTileEntityElectricCokeOven;
import gregtech6.tileentity.multiblocks.MultiTileEntityElectrolyzer;
import gregtech6.tileentity.multiblocks.MultiTileEntityFermenter;
import gregtech6.tileentity.multiblocks.MultiTileEntityFusionReactor;
import gregtech6.tileentity.multiblocks.MultiTileEntityImplosionCompressor;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeBoiler;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeCircuit;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeCompressor;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeDynamo;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeExtruder;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeHeatExchanger;
import gregtech6.tileentity.multiblocks.MultiTileEntityLargeTurbineSteam;
import gregtech6.tileentity.multiblocks.MultiTileEntityLightningRod;
import gregtech6.tileentity.multiblocks.MultiTileEntityLogisticsCore;
import gregtech6.tileentity.multiblocks.MultiTileEntityMatterFabricator;
import gregtech6.tileentity.multiblocks.MultiTileEntityMixer;
import gregtech6.tileentity.multiblocks.MultiTileEntityOven;
import gregtech6.tileentity.multiblocks.MultiTileEntityShredder;
import gregtech6.tileentity.multiblocks.MultiTileEntitySluice;
import gregtech6.tileentity.multiblocks.MultiTileEntitySqueezer;
import gregtech6.tileentity.multiblocks.MultiTileEntityTank3x3x3Metal;
import gregtech6.tileentity.multiblocks.MultiTileEntityTank3x3x3Wood;
import gregtech6.tileentity.multiblocks.MultiTileEntityTank5x5x5Metal;
import gregtech6.tileentity.tanks.MultiTileEntityLongDistancePipelineFluid;
import gregtech6.tileentity.tanks.MultiTileEntityPump;
import gregtech6.tileentity.tools.MultiTileEntityBasin;
import gregtech6.tileentity.tools.MultiTileEntityCrossing;
import gregtech6.tileentity.tools.MultiTileEntityFaucet;
import gregtech6.tileentity.tools.MultiTileEntityMold;
import gregtech6.tileentity.tools.MultiTileEntitySmeltery;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;

public class Loader_MultiTileEntities implements Runnable {
	@Override
	public void run() {

		MultiTileEntityRegistry aRegistry = MultiTileEntityRegistry.getRegistry("gt6.multitileentity");

		MultiTileEntityBlock
		  aMetal      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
		, aMetalChips = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "iron"         , Material.iron             , Block.soundTypeMetal, TOOL_shovel , 0, 0, 15, F, F)
		, aMetalWires = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_cutter , 0, 0, 15, F, F)
		, aMachine    = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "machine"      , MaterialMachines.instance , Block.soundTypeMetal, TOOL_wrench , 0, 0, 15, F, F)
		, aWooden     = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "wood"         , Material.wood             , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
		, aBush       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "leaves"       , Material.leaves           , Block.soundTypeGrass, TOOL_axe    , 0, 0, 15, F, F)
		, aStone      = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , Material.rock             , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
		, aWool       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "cloth"        , Material.cloth            , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
		, aTNT        = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "tnt"          , Material.tnt              , Block.soundTypeGrass, TOOL_pickaxe, 0, 0, 15, F, F)
		, aUtilMetal  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeMetal, TOOL_pickaxe, 0, 0, 15, F, F)
		, aUtilStone  = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeStone, TOOL_pickaxe, 0, 0, 15, F, F)
		, aUtilWood   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeWood , TOOL_axe    , 0, 0, 15, F, F)
		, aUtilWool   = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "redstoneLight", Material.redstoneLight    , Block.soundTypeCloth, TOOL_shears , 0, 0, 15, F, F)
		, aHive       = MultiTileEntityBlock.getOrCreate(MD.GT.mID, "rock"         , MaterialScoopable.instance, Block.soundTypeWood , TOOL_scoop  , 0, 0, 15, F, F)
		;

		storages   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		crucible   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		unsorted1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		unsorted2_1  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		unsorted2_2  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		unsorted2_3  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		computer   (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
		multiblocks(aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);

		Loader_MultiTileEntities2.run  (aRegistry, aMetal, aMetalChips, aMetalWires, aMachine, aWooden, aBush, aStone, aWool, aTNT, aHive, aUtilMetal, aUtilStone, aUtilWood, aUtilWool, MT.NULL, null);
	}

	private static void metalset(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, OreDictMaterial aMat, int aID, float aHardness, float aResistance, int aHopperSize) {
		aRegistry.add(aMat.getLocal() + " Chest"                            , "Chests"          ,       aID, 32745, MultiTileEntityChest.class                  , 0                 , 16, aMetal    , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  , NBT_INV_SIZE, 54, NBT_TEXTURE, "metalchest"), "sPw", "RSR", "PPP", 'P', OP.plate.dat(aMat), 'R', OP.ring.dat(aMat), 'S', OP.stick.dat(aMat));
		aRegistry.add(aMat.getLocal() + " reinforced wooden Chest"          , "Chests"          ,   500+aID, 32745, MultiTileEntityChest.class                  , 0                 , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness/2, NBT_RESISTANCE, aResistance/2, NBT_INV_SIZE, 54, NBT_TEXTURE, "woodchest", NBT_FLAMMABILITY, 100), "sSw", "RCR", "SSS", 'C', OD.craftingChest, 'R', OP.ring.dat(aMat), 'S', OP.stick.dat(aMat));
		aRegistry.add("Mechanical " + aMat.getLocal() + " Safe"             , "Safes"           ,  2000+aID,  2010, MultiTileEntitySafeMechanical.class         , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness*2, NBT_RESISTANCE, aResistance*2, NBT_INV_SIZE, 15), "PGP", "GOS", "PGP", 'P', OP.plateQuintuple.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'O', OP.gearGt.dat(aMat), 'S', OP.stick.dat(aMat));
		aRegistry.add("Key Locked " + aMat.getLocal() + " Safe"             , "Safes"           ,  3000+aID,  2010, MultiTileEntitySafeKeyLocked.class          , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness*2, NBT_RESISTANCE, aResistance*2, NBT_INV_SIZE, 15), "PGP", "OGS", "PGP", 'P', OP.plateQuintuple.dat(aMat), 'G', OP.gearGtSmall.dat(aMat), 'O', OP.gearGt.dat(aMat), 'S', OP.stick.dat(aMat));
		aRegistry.add("Advanced Crafting Table (" + aMat.getLocal() + ")"   , "Crafting Tables" ,  5000+aID,  5010, MultiTileEntityAdvancedCraftingTable.class  , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "PdP", "TWT", "PCP", 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat), 'W', OD.craftingWorkBench, 'C', OD.craftingChest);
		aRegistry.add("Charging Crafting Table (" + aMat.getLocal() + ")"   , "Crafting Tables" ,  5500+aID,  5010, MultiTileEntityChargingCraftingTable.class  , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  , NBT_GUI, RES_PATH_GUI + "machines/AdvancedCraftingTableCharging.png"), "TCT", "dMx", "WWW", 'M', aRegistry.getItem(5000+aID), 'T', OP.screw.dat(aMat), 'W', MT.DATA.CABLES_04[3], 'C', OD_CIRCUITS[3]);
		aRegistry.add("Locker ("+ aMat.getLocal() + ")"                     , "Storage"         ,  7300+aID, 32751, MultiTileEntityLocker.class                 , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "SLS", "LCL", "PMP", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'C', aRegistry.getItem(aID), 'S', OP.stick.dat(aMat), 'L', OD.itemLeather);
		aRegistry.add("Charging Locker ("+ aMat.getLocal() + ")"            , "Storage"         ,  7500+aID, 32751, MultiTileEntityLockerCharging.class         , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "WCW", "WMW", "WCW", 'M', aRegistry.getItem(7300+aID), 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]);
		aRegistry.add("Compartment Drawer ("+ aMat.getLocal() + ")"         , "Storage"         ,  4000+aID, 32751, MultiTileEntityDrawerQuad.class             , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "CPC", "PMP", "CPC", 'M', OP.casingMachine.dat(aMat), 'P', OP.plate.dat(aMat), 'C', aRegistry.getItem(aID));
		aRegistry.add("Mass Storage ("+ aMat.getLocal() + ")"               , "Storage"         ,  6000+aID, 32751, MultiTileEntityMassStorageStandard.class    , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "PCP", "CMC", "PCP", 'M', OP.casingMachineQuadruple.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', aRegistry.getItem(aID));
		aRegistry.add("Logistics Mass Storage ("+ aMat.getLocal() + ")"     , "Logistics"       ,  6200+aID, 17997, MultiTileEntityMassStorageLogistics.class   , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, MT.Black, NBT_COLOR, UT.Code.getRGBInt(MT.Black.fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "TQT", "wCd", "TMT", 'M', aRegistry.getItem(6000+aID), 'Q', IL.Cover_Logistics_Generic_Storage, 'T', OP.screw.dat(aMat), 'C', OD_CIRCUITS[4]);
		aRegistry.add("Bookshelf (" + aMat.getLocal() + ")"                 , "Storage"         ,  7100+aID, 32751, MultiTileEntityBookShelf.class              , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  ), "PPP", "sfh", "PPP", 'P', OP.plate.dat(aMat));
		aRegistry.add(aMat.getLocal() + " Hopper"                           , "Hoppers"         ,  8000+aID,  8010, MultiTileEntityHopper.class                 , 0                 , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  , NBT_INV_SIZE, Math.max(1, aHopperSize)), "PwP", "XCX", " Xh", 'P', OP.plate.dat(aMat), 'X', OP.plateCurved.dat(aMat), 'C', OD.craftingChest);
		aRegistry.add(aMat.getLocal() + " Queue Hopper"                     , "Hoppers"         ,  8200+aID,  8010, MultiTileEntityQueueHopper.class            , 0                 , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat    , NBT_COLOR, UT.Code.getRGBInt(aMat    .fRGBaSolid), NBT_HARDNESS, aHardness  , NBT_RESISTANCE, aResistance  , NBT_INV_SIZE, Math.max(2, aHopperSize)), "PCP", "XCX", "wXh", 'P', OP.plate.dat(aMat), 'X', OP.plateCurved.dat(aMat), 'C', OD.craftingChest);
	}

	private static void storages(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<?> aClass) {
		OM.data(aRegistry.add("Loot Chest", "Chests", 32745, 32745, MultiTileEntityChest.class, 0, 16, aStone, UT.NBT.make(NBT_MATERIAL, MT.Stone, NBT_COLOR, UT.Code.getRGBInt(MT.Stone.fRGBaSolid), NBT_HARDNESS, 5.0F, NBT_RESISTANCE, 14.0F, NBT_INV_SIZE, 54, NBT_TEXTURE, "lootchest")), MT.Stone, U*8);

		aMat = ANY.Steel;           aRegistry.add("Storage Inserter"                    , "Storage"     , 32751, 32751, MultiTileEntityStorageInserter.class     , aMat.mToolQuality , 16, aMachine  , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F), "PhP", "SDE", "PwP", 'P', OP.pipeQuadruple.dat(aMat), 'S', OP.gem.dat(ANY.Sapphire), 'E', OP.gem.dat(ANY.Emerald), 'D', OP.gem.dat(ANY.Diamond));

		aMat = ANY.Wood;            aRegistry.add("Wooden Item Barrel (Cheap)"          , "Storage"     ,  6998, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY,  5000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankAnyWood   , 'S', OP.stickLong.dat(MT.Pb         ));
		aMat = ANY.Wood;            aRegistry.add("Wooden Item Barrel (Cheap)"          , "Storage"     ,  6992, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY,  5000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankAnyWood   , 'S', OP.stickLong.dat(MT.Bi         ));
		aMat = ANY.Wood;            aRegistry.add("Wooden Item Barrel (Cheap)"          , "Storage"     ,  6991, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY,  5000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankAnyWood   , 'S', OP.stickLong.dat(MT.Bronze     ));
		aMat = ANY.Wood;            aRegistry.add("Wooden Item Barrel (Cheap)"          , "Storage"     ,  6990, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY,  5000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankAnyWood   , 'S', OP.stickLong.dat(MT.Brass      ));
		aMat = MT.WoodSealed;       aRegistry.add("Wooden Item Barrel"                  , "Storage"     ,  6999, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY, 10000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(ANY.Iron      ));
		aMat = MT.Skyroot;          aRegistry.add("Skyroot Item Barrel"                 , "Storage"     ,  6983, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY, 10000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankSkyroot   , 'S', OP.stickLong.dat(ANY.Iron      ));
		aMat = MT.Weedwood;         aRegistry.add("Weedwood Item Barrel"                , "Storage"     ,  6989, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY,  5000                        ), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OD.plankWeedwood  , 'S', OP.stickLong.dat(MT.Syrmorite  ));
		aMat = MT.Livingwood;       aRegistry.add("Livingwood Item Barrel"              , "Storage"     ,  6988, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY, 10000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(ANY.Iron      ));
		aMat = MT.Dreamwood;        aRegistry.add("Dreamwood Item Barrel"               , "Storage"     ,  6987, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_CAPACITY, 10000                        ), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(MT.Manasteel  ));
		aMat = MT.Shimmerwood;      aRegistry.add("Shimmerwood Item Barrel"             , "Storage"     ,  6986, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_CAPACITY, 10000                        ), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(MT.Manasteel  ));
		aMat = MT.IronWood;         aRegistry.add("Ironwood Item Barrel"                , "Storage"     ,  6997, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY, 10000                        ), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(ANY.Iron      ));
		aMat = MT.Greatwood;        aRegistry.add("Greatwood Item Barrel"               , "Storage"     ,  6985, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   3.0F, NBT_RESISTANCE,   3.0F, NBT_CAPACITY, 10000, NBT_FLAMMABILITY,  100), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(ANY.Iron      ));
		aMat = MT.Silverwood;       aRegistry.add("Silverwood Item Barrel"              , "Storage"     ,  6984, 32751, MultiTileEntityMassStorageBarrel.class   , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_CAPACITY, 10000                        ), "rCs", "PSP", "PSP", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(MT.Thaumium   ));

		aMat = MT.Plastic;          aRegistry.add("Plastic Storage Box (1024)"          , "Storage"     ,  6996, 32751, MultiTileEntityMassStorageBox.class      , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY,  1024                        ), "dPT", "PCP", "TPT", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.Plastic;          aRegistry.add("Plastic Storage Box (512)"           , "Storage"     ,  6995, 32751, MultiTileEntityMassStorageBox.class      , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY,   512                        ), "TPd", "PCP", "TPT", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.Plastic;          aRegistry.add("Plastic Storage Box (256)"           , "Storage"     ,  6994, 32751, MultiTileEntityMassStorageBox.class      , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY,   256                        ), "TPT", "PCP", "dPT", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.Plastic;          aRegistry.add("Plastic Storage Box (128)"           , "Storage"     ,  6993, 32751, MultiTileEntityMassStorageBox.class      , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_CAPACITY,   128                        ), "TPT", "PCP", "TPd", 'C', OD.craftingChest, 'P', OP.plate.dat(aMat), 'T', OP.screw.dat(aMat));

		// 6982 is next

		CR.shapeless(aRegistry.getItem(6996), CR.DEF_NCC, new Object[] {aRegistry.getItem(6995)});
		CR.shapeless(aRegistry.getItem(6995), CR.DEF_NCC, new Object[] {aRegistry.getItem(6994)});
		CR.shapeless(aRegistry.getItem(6994), CR.DEF_NCC, new Object[] {aRegistry.getItem(6993)});
		CR.shapeless(aRegistry.getItem(6993), CR.DEF_NCC, new Object[] {aRegistry.getItem(6996)});

		aMat = ANY.Wood; for (int i = 0; i < 100; i++) aRegistry.add("Wooden Bookshelf" , "Storage"     ,i+7000, 32751, MultiTileEntityBookShelf.class           , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 2.0F, NBT_RESISTANCE, 2.0F, NBT_FLAMMABILITY, 150, NBT_TEXTURE, i    , NBT_HIDDEN, ST.invalid(PlankData.PLANKS[i    ])), ST.invalid(PlankData.PLANKS[i    ]) ? ZL : new Object[] {"PPP", "sfr", "PPP", 'P', PlankData.PLANKS[i    ]});
		aMat = ANY.Wood; for (int i = 0; i < 100; i++) aRegistry.add("Wooden Bookshelf" , "Storage"     ,i+7900, 32751, MultiTileEntityBookShelf.class           , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 2.0F, NBT_RESISTANCE, 2.0F, NBT_FLAMMABILITY, 150, NBT_TEXTURE, i+100, NBT_HIDDEN, ST.invalid(PlankData.PLANKS[i+100])), ST.invalid(PlankData.PLANKS[i+100]) ? ZL : new Object[] {"PPP", "sfr", "PPP", 'P', PlankData.PLANKS[i+100]});
		aMat = ANY.Wood; for (int i = 0; i < 100; i++) aRegistry.add("Wooden Bookshelf" , "Storage"     ,i+7800, 32751, MultiTileEntityBookShelf.class           , aMat.mToolQuality , 16, aWooden   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 2.0F, NBT_RESISTANCE, 2.0F, NBT_FLAMMABILITY, 150, NBT_TEXTURE, i+200, NBT_HIDDEN, ST.invalid(PlankData.PLANKS[i+200])), ST.invalid(PlankData.PLANKS[i+200]) ? ZL : new Object[] {"PPP", "sfr", "PPP", 'P', PlankData.PLANKS[i+200]});

		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Pb                    ,    0,   4.0F,   4.0F,  1);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Bi                    ,   16,   4.0F,   4.0F,  2);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Sb                    ,   47,   4.0F,   4.0F,  2);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ni                    ,   22,   4.0F,   4.0F,  3);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Bronze                ,    9,   7.0F,   7.0F,  3);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.FakeOsmium            ,   37,   2.0F,   2.0F,  3);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Al                    ,    1,   2.0F,   2.0F,  4);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Brass                 ,    8,   2.5F,   2.5F,  4);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.TinAlloy              ,    5,   3.0F,   3.0F,  4);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Co                    ,   21,   4.0F,   4.0F,  4);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ardite                ,   38,   2.0F,   2.0F,  4);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ge                    ,   23,   4.0F,   4.0F,  5);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Invar                 ,    6,   4.0F,   4.0F,  5);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Steel                 ,   10,   6.0F,   6.0F,  5);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.HSLA                  ,   18,   6.0F,   6.0F,  6);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Au                    ,    2,   2.0F,   2.0F,  6);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ag                    ,    3,   2.0F,   2.0F,  6);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Mn                    ,   46,   6.0F,   6.0F,  6);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Manyullyn             ,   39,   3.0F,   3.0F,  6);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Knightmetal           ,   25,   7.0F,   7.0F,  7);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.SteelGalvanized       ,   19,   6.0F,   6.0F,  7);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Meteorite             ,   43,   7.0F,   7.0F,  7);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.MeteoricSteel         ,   24,   8.0F,   8.0F,  8);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.GildedIron            ,   20,   6.0F,   6.0F,  8);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Mo                    ,   49,   6.0F,   6.0F,  8);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Syrmorite             ,   44,   4.0F,   4.0F,  9);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Electrum              ,    7,   2.0F,   2.0F,  9);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.StainlessSteel        ,   11,   5.0F,   5.0F,  9);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Thaumium              ,   27,   9.0F,   9.0F,  9);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Manasteel             ,   40,   9.0F,   9.0F,  9);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ti                    ,   12,   9.0F,   9.0F, 12);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Cr                    ,   13,   4.0F,   4.0F, 14);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Pt                    ,    4,   2.0F,   2.0F, 18);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Octine                ,   45,   8.0F,   8.0F, 18);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Desh                  ,   30,  15.0F,  15.0F, 18);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Terrasteel            ,   42,  15.0F,  15.0F, 18);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.TungstenSteel         ,   14,  12.5F,  12.5F, 27);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.TungstenCarbide       ,   17,  12.5F,  12.5F, 27);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.DuraniumAlloy         ,   31,  20.0F,  20.0F, 27);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Draconium             ,   35,  50.0F,  50.0F, 27);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ultimet               ,   48,  12.5F,  12.5F, 27);
		metalset(aRegistry, aMetal, aMachine, aWooden, ANY.W                    ,   26,  10.0F,  10.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ir                    ,   15,  15.0F,  15.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Os                    ,   29,   3.0F,   3.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.VoidMetal             ,   28,  30.0F,  30.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.ElvenElementium       ,   41,  30.0F,  30.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.TritaniumAlloy        ,   32,  30.0F,  30.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Ad                    ,   33, 100.0F, 100.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Bedrock_HSLA_Alloy    ,   34, 100.0F, 100.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.DraconiumAwakened     ,   36, 100.0F, 100.0F, 36);
		metalset(aRegistry, aMetal, aMachine, aWooden, MT.Infinity              ,   50, 100.0F, 100.0F, 36); // 51 is next
	}

	private static void crucible(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		// Crucibles
		for(int i=0; i<MT.DATA.Crucible_T.length;i++) {
			aClass = MultiTileEntitySmeltery.class;
			aMat = MT.DATA.Crucible_T[i];
			//aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i]), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
			//aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i]));
			if(i <= 1) {
				aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i], NBT_MAXTEMPERATURE, CS.TEMP_C[i]));
				RM.Extruder.addRecipe2(T, 4, CS.DT[4], 10000, OP.plate.mat(aMat, 9), IL.Shape_Stone_Crucible.get(0), aRegistry.getItem(1000+i));
			}else if(i <= 9) {
				aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i], NBT_MAXTEMPERATURE, CS.TEMP_C[i]));
				RM.Extruder.addRecipe2(T, VC[i], CS.DT[4], 10000, OP.plate.mat(aMat, 9), IL.Shape_SimpleEx_Crucible.get(0), aRegistry.getItem(1000+i));
			} else {
				aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i], NBT_MAXTEMPERATURE, CS.TEMP_C[i]));
				//TODO
				RM.Extruder.addRecipe2(T, VC[i], CS.DT[4], 10000, OP.plate.mat(aMat, 9), IL.Shape_Extruder_Crucible.get(0), aRegistry.getItem(1000+i));

				//aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000 + i,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, CS.ACID_C[i], NBT_MAXTEMPERATURE, CS.TEMP_C[i]), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
			}

			aClass = MultiTileEntityFaucet.class;
			aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1700 + i,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, CS.ACID_C[i]), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));

			aClass = MultiTileEntityMold.class;
			aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1050 + i,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, CS.ACID_C[i]), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));

			aClass = MultiTileEntityBasin.class;
			aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1750 + i,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, CS.ACID_C[i]), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));

			aClass = MultiTileEntityCrossing.class;
			aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1850 + i,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		}

		/*
		aMat = MT.Stone;                aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1000,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', Blocks.stone);
		aMat = MT.Basalt;               aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1001,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteBlack;         aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1002,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteRed;           aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1003,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.NetherBrick;          aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1004,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Ceramic;              aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1005,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OD.craftingHardenedClay);
		aMat = MT.Umber;                aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1006,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Livingrock;           aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1007,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Holystone;            aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1008,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Betweenstone;         aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1009,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.stone.dat(aMat));

		aMat = ANY.Quartz;              aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1018,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "BhB", "ByB", "BBB", 'B', OP.gem.dat(ANY.Quartz));
		aMat = MT.C;                    aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1019,  1022, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "ChC", "CyC", "CCC", 'C', OP.plate.dat(MT.Graphene));

		aMat = MT.Bronze;               aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1020,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1021,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Steel;                aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1022,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.HSLA;                 aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1041,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1025,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.DarkIron;             aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1026,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricIron;         aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1031,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricSteel;        aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1032,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Knightmetal;          aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1027,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1028,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Octine;               aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1042,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Thaumium;             aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1029,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1023,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1033,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Mo;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1034,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Nb;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1035,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1036,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1037,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1039,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1040,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.V;                    aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1038,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1024,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta4HfC5;              aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1043,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.VoidMetal;            aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1030,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));

		aMat = MT.Bedrock_HSLA_Alloy;   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1048,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, F), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Smelting Crucible (" + aMat.getLocal() + ")"         , "Smelting Crucibles"                  ,  1049,  1022, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_RECIPEMAP, RM.CrucibleAlloying , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ACIDPROOF, T), "PhP", "PwP", "PPP", 'P', OP.plate.dat(aMat));
		*/

		RM.CrucibleSmelting.mRecipeMachineList.addAll(RM.CrucibleAlloying.mRecipeMachineList);



		// Drains
		/*
		aClass = MultiTileEntityFaucet.class;
		for(int i=0; i<MT.DATA.Crucible_T.length;i++) {
			aMat = MT.DATA.Crucible_T[i];
			aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1700 + i,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,   HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, CS.ACID_C[i]), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		}
		*/


		/*
		aMat = MT.Stone;                aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1700,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', Blocks.stone);
		aMat = MT.Basalt;               aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1701,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteBlack;         aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1702,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteRed;           aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1703,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.NetherBrick;          aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1704,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Ceramic;              aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1705,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OD.craftingHardenedClay);
		aMat = MT.Umber;                aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1706,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Livingrock;           aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1707,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Holystone;            aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1708,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Betweenstone;         aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1709,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.stone.dat(aMat));

		aMat = ANY.Quartz;              aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1718,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", " B ", 'B', OP.gem.dat(ANY.Quartz));
		aMat = MT.C;                    aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1719,  1722, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "C C", " C ", 'C', OP.plate.dat(MT.Graphene));

		aMat = MT.Bronze;               aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1720,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1721,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Steel;                aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1722,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.HSLA;                 aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1741,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1725,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.DarkIron;             aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1726,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricIron;         aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1731,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricSteel;        aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1732,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Knightmetal;          aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1727,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1728,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Octine;               aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1742,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Thaumium;             aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1729,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1723,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1733,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Mo;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1734,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Nb;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1735,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1736,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1737,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1739,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1740,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.V;                    aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1738,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1724,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta4HfC5;              aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1743,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.VoidMetal;            aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1730,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));

		aMat = MT.Bedrock_HSLA_Alloy;   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1748,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Crucible Faucet (" + aMat.getLocal() + ")"           , "Crucibles Faucets"                   ,  1749,  1722, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", " P ", 'P', OP.plate.dat(aMat));
	*/


		// Molds
		/*
		aClass = MultiTileEntityMold.class;
		aMat = MT.Stone;                aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1050,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', Blocks.stone);
		aMat = MT.Basalt;               aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1051,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteBlack;         aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1052,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteRed;           aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1053,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.NetherBrick;          aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1054,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Ceramic;              aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1055,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OD.craftingHardenedClay);
		aMat = MT.Umber;                aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1056,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Livingrock;           aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1057,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Holystone;            aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1058,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));
		aMat = MT.Betweenstone;         aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1059,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.stone.dat(aMat));

		aMat = ANY.Quartz;              aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1068,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "B B", "BBB", 'B', OP.gem.dat(ANY.Quartz));
		aMat = MT.C;                    aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1069,  1072, aClass, aMat.mToolQuality, 16, aUtilStone       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "C C", "CCC", 'C', OP.plate.dat(MT.Graphene));

		aMat = MT.Bronze;               aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1070,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1071,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Steel;                aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1072,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.HSLA;                 aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1091,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1075,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.DarkIron;             aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1076,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricIron;         aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1081,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricSteel;        aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1082,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Knightmetal;          aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1077,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1078,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Octine;               aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1092,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Thaumium;             aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1079,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1073,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1083,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Mo;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1084,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Nb;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1085,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1086,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1087,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1089,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1090,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.V;                    aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1088,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1074,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta4HfC5;              aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1093,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.VoidMetal;            aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1080,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));

		aMat = MT.Bedrock_HSLA_Alloy;   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1098,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Mold (" + aMat.getLocal() + ")"                      , "Molds"                               ,  1099,  1072, aClass, aMat.mToolQuality, 16, aUtilMetal       , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   1.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "h y", "P P", "PPP", 'P', OP.plate.dat(aMat));
		 */


		// Basins
		/*
		aClass = MultiTileEntityBasin.class;
		aMat = MT.Stone;                aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1750,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', Blocks.stone);
		aMat = MT.Basalt;               aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1751,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteBlack;         aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1752,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteRed;           aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1753,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.NetherBrick;          aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1754,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Ceramic;              aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1755,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OD.craftingHardenedClay);
		aMat = MT.Umber;                aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1756,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Livingrock;           aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1757,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Holystone;            aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1758,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Betweenstone;         aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1759,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.stone.dat(aMat));

		aMat = ANY.Quartz;              aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1768,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "BhB", "ByB", " B ", 'B', OP.gem.dat(ANY.Quartz));
		aMat = MT.C;                    aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1769,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "ChC", "CyC", " C ", 'C', OP.plate.dat(MT.Graphene));

		aMat = MT.Bronze;               aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1770,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1771,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Steel;                aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1772,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.HSLA;                 aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1791,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1775,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.DarkIron;             aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1776,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricIron;         aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1781,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricSteel;        aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1782,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Knightmetal;          aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1777,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1778,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Octine;               aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1792,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Thaumium;             aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1779,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1773,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1783,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Mo;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1784,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Nb;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1785,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1786,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1787,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1789,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1790,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.V;                    aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1788,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1774,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta4HfC5;              aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1793,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.VoidMetal;            aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1780,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));

		aMat = MT.Bedrock_HSLA_Alloy;   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1798,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Basin (" + aMat.getLocal() + ")"                     , "Molds"                               ,  1799,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "PhP", "PyP", " P ", 'P', OP.plate.dat(aMat));
*/


		// Crossings
		/*
		aClass = MultiTileEntityCrossing.class;
		aMat = MT.Stone;                aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1850,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', Blocks.stone);
		aMat = MT.Basalt;               aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1851,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteBlack;         aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1852,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.GraniteRed;           aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1853,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  15.0F, NBT_RESISTANCE,  15.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.NetherBrick;          aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1854,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Ceramic;              aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1855,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OD.craftingHardenedClay);
		aMat = MT.Umber;                aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1856,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Livingrock;           aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1857,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Holystone;            aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1858,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));
		aMat = MT.Betweenstone;         aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1859,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.stone.dat(aMat));

		aMat = ANY.Quartz;              aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1868,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hBy", "BBB", " B ", 'B', OP.gem.dat(ANY.Quartz));
		aMat = MT.C;                    aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1869,  1072, aClass, aMat.mToolQuality, 16, aStone           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hCy", "CCC", " C ", 'C', OP.plate.dat(MT.Graphene));

		aMat = MT.Bronze;               aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1870,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1871,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Steel;                aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1872,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.HSLA;                 aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1891,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1875,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.DarkIron;             aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1876,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricIron;         aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1881,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.MeteoricSteel;        aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1882,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Knightmetal;          aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1877,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1878,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Octine;               aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1892,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Thaumium;             aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1879,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1873,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1883,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Mo;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1884,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Nb;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1885,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1886,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1887,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1889,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1890,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.V;                    aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1888,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1874,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ta4HfC5;              aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1893,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.VoidMetal;            aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1880,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));

		aMat = MT.Bedrock_HSLA_Alloy;   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1898,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, F), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Crucible Crossing (" + aMat.getLocal() + ")"         , "Molds"                               ,  1899,  1072, aClass, aMat.mToolQuality, 16, aMetal           , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_ACIDPROOF, T), "hPy", "PPP", " P ", 'P', OP.plate.dat(aMat));
	*/
	}

	private static void unsorted1(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {

		for(int i=0;i<MT.DATA.Heat_T.length;i++) {
			aMat = MT.DATA.Heat_T[i];

			// Burning Boxes
			aClass = MultiTileEntityGeneratorSolid.class;
			if(i != 0) {
				aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1100+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
			}else {
				//Stone Age
				aRegistry.add("Cheap Burning Box (Solid, Stone)"        , "Burning Boxes"                       ,  1129,  1104, aClass, MT.Stone.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, MT.Stone, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(MT.Stone.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i]/2, NBT_ENERGY_EMITTED, TD.Energy.HU),  "PPP", "PwP", "BBB", 'B', OP.plateDouble.dat(MT.Stone), 'P', OP.plate.dat(MT.Stone), 'C', OP.plateDouble.dat(MT.Stone));
				//ULV
				aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1100+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
			}
			aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1130+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i]*4, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

			// Steam Boilers
			aClass = MultiTileEntityBoilerTank.class;
			aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1160+i,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  V[i]*10000, NBT_CAPACITY_SU,  V[i]*10000, NBT_OUTPUT_SU,  V[i]*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
			aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1190+i,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  V[i]*4*10000, NBT_CAPACITY_SU,  V[i]*4*10000, NBT_OUTPUT_SU,  V[i]*4*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));

			// Steam Engines
			aClass = MultiTileEntityEngineSteam.class;
			aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1220+i,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 10000, NBT_CAPACITY,  V[i]*1000, NBT_INPUT,   V[i]*STEAM_PER_EU, NBT_OUTPUT,   V[i], NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
			aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1250+i,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 10000, NBT_CAPACITY,  V[i]*4*10000, NBT_INPUT,   V[i]*STEAM_PER_EU*4, NBT_OUTPUT,   V[i]*4, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));

			// Liquid Burning Boxes
			aClass = MultiTileEntityGeneratorLiquid.class;
			aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1280+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
			aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1310+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

			// Gas Burning Boxes
			aClass = MultiTileEntityGeneratorGas.class;
			aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1340+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
			aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1370+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

			// Fluidized Burning Boxes
			aClass = MultiTileEntityGeneratorFluidBed.class;
			aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  1400+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  10000, NBT_OUTPUT,  V[i]*4, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
			aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  1430+i,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  10000, NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

			// Heat Exchangers
			aClass = MultiTileEntityGeneratorHotFluid.class;
			aRegistry.add("Heat Exchanger (" + aMat.getLocal() + ")"            , "Heat Exchangers"                     ,  1460+i,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  V[i], NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachine.dat(aMat), 'O', OP.pipeSmall.dat(ANY.Cu), 'P', OP.plate.dat(MT.Pb), 'C', OP.plateDouble.dat(ANY.Cu           ));
			aRegistry.add("Dense Heat Exchanger (" + aMat.getLocal() + ")"      , "Heat Exchangers"                     ,  1490+i,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  V[i]*4, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachineQuadruple.dat(aMat), 'O', OP.pipeLarge.dat(ANY.Cu), 'P', OP.plateQuadruple.dat(MT.Pb), 'C', OP.plateDense.dat(ANY.Cu           ));

			// Diesel Engines
			aClass = MultiTileEntityMotorLiquid.class;
			aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  1520+i,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,   V[i], NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
			aRegistry.add("Dense Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  1550+i,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,   V[i]*4, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);

			// Steam Turbines
			aClass = MultiTileEntityTurbineSteam.class;
			aRegistry.add("Steam Turbine (" + aMat.getLocal() + ")" , "Turbines"                            ,  2150+i,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[i]*STEAM_PER_EU, NBT_OUTPUT,   V[i], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Bronze           ));
			aRegistry.add("Dense Steam Turbine (" + aMat.getLocal() + ")" , "Turbines"                            ,  2180+i,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[i]*STEAM_PER_EU*4, NBT_OUTPUT,   V[i]*4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Bronze           ));
		}

		// Steam Turbines
		/*
		aClass = MultiTileEntityTurbineSteam.class;
		for(int i=0;i<MT.DATA.Heat_T.length;i++) {
			aMat = MT.DATA.Heat_T[i];    aRegistry.add("Steam Turbine (" + aMat.getLocal() + ")" , "Turbines"                            ,  2150+i,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[i]*STEAM_PER_EU, NBT_OUTPUT,   V[i], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Bronze           ));
		}
		*/

		/*
		// Burning Boxes
		aClass = MultiTileEntityGeneratorSolid.class;

		aMat = MT.Pb;                   aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1100,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bi;                   aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1101,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  20, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1102,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  24, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1103,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1104,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  7000, NBT_OUTPUT,  32, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1105,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 112, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1106,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  8500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1107,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1108,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Burning Box (Solid, " + aMat.getLocal() + ")"        , "Burning Boxes"                       ,  1109,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));

		aMat = MT.Pb;                   aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1150,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bi;                   aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1151,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  80, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1152,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1153,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1154,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  7000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1155,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 448, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1156,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 384, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1157,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1158,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Burning Box (Solid, " + aMat.getLocal() + ")"  , "Burning Boxes"                       ,  1159,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Furnace, NBT_EFFICIENCY, 10000, NBT_OUTPUT,1024, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "PwP", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

		// Steam Boilers
		aClass = MultiTileEntityBoilerTank.class;
		aMat = MT.Pb;                   aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1200,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  160000, NBT_CAPACITY_SU,  160000, NBT_OUTPUT_SU,  16*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.Bi;                   aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1201,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  200000, NBT_CAPACITY_SU,  200000, NBT_OUTPUT_SU,  20*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.Bronze;               aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1202,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  240000, NBT_CAPACITY_SU,  240000, NBT_OUTPUT_SU,  24*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1203,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  160000, NBT_CAPACITY_SU,  160000, NBT_OUTPUT_SU,  16*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = ANY.Steel;               aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1204,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  320000, NBT_CAPACITY_SU,  320000, NBT_OUTPUT_SU,  32*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1205,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  960000, NBT_CAPACITY_SU,  960000, NBT_OUTPUT_SU,  96*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1206,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 1120000, NBT_CAPACITY_SU, 1120000, NBT_OUTPUT_SU, 112*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1207,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 1280000, NBT_CAPACITY_SU, 1280000, NBT_OUTPUT_SU, 128*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Steam Boiler Tank (" + aMat.getLocal() + ")"         , "Steam Boilers"                       ,  1208,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 1280000, NBT_CAPACITY_SU, 1280000, NBT_OUTPUT_SU, 128*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDouble.dat(aMat));

		aMat = MT.Pb;                   aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1250,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  640000, NBT_CAPACITY_SU,  640000, NBT_OUTPUT_SU,  64*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.Bi;                   aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1251,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  800000, NBT_CAPACITY_SU,  800000, NBT_OUTPUT_SU,  80*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.Bronze;               aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1252,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  960000, NBT_CAPACITY_SU,  960000, NBT_OUTPUT_SU,  96*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1253,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY,  640000, NBT_CAPACITY_SU,  640000, NBT_OUTPUT_SU,  64*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = ANY.Steel;               aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1254,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 1280000, NBT_CAPACITY_SU, 1280000, NBT_OUTPUT_SU, 128*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1255,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 3840000, NBT_CAPACITY_SU, 3840000, NBT_OUTPUT_SU, 384*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1256,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 4480000, NBT_CAPACITY_SU, 4480000, NBT_OUTPUT_SU, 448*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1257,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 5120000, NBT_CAPACITY_SU, 5120000, NBT_OUTPUT_SU, 512*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Strong Steam Boiler Tank (" + aMat.getLocal() + ")"  , "Steam Boilers"                       ,  1258,  1204, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_CAPACITY, 5120000, NBT_CAPACITY_SU, 5120000, NBT_OUTPUT_SU, 512*STEAM_PER_EU, NBT_ENERGY_ACCEPTED, TD.Energy.HU), " P ", "PwP", "PhP", 'P', OP.plateDense.dat(aMat));

		// Steam Engines
		aClass = MultiTileEntityEngineSteam.class;

		aMat = MT.Pb;                   aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1300,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 3000, NBT_CAPACITY,  16000, NBT_OUTPUT,  16/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.TinAlloy;             aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1301,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 4000, NBT_CAPACITY,  20000, NBT_OUTPUT,  20/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.Bronze;               aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1302,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY,  24000, NBT_OUTPUT,  24/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.Brass;                aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1309,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY,  24000, NBT_OUTPUT,  24/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1303,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6400, NBT_CAPACITY,  16000, NBT_OUTPUT,  16/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.IronWood;             aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1310,  1304, aClass, aMat.mToolQuality, 16, aWooden      , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6450, NBT_CAPACITY,  16000, NBT_OUTPUT,  16/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = ANY.Steel;               aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1304,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY,  32000, NBT_OUTPUT,  32/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1311,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6200, NBT_CAPACITY,  64000, NBT_OUTPUT,  64/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1305,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6300, NBT_CAPACITY,  96000, NBT_OUTPUT,  96/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1306,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5800, NBT_CAPACITY, 112000, NBT_OUTPUT, 112/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1307,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5800, NBT_CAPACITY, 128000, NBT_OUTPUT, 128/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Steam Engine (" + aMat.getLocal() + ")"              , "Engines"                             ,  1308,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6000, NBT_CAPACITY, 128000, NBT_OUTPUT, 128/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDouble.dat(aMat), 'I', OP.springSmall.dat(aMat));


		aMat = MT.Pb;                   aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1350,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 3000, NBT_CAPACITY,  64000, NBT_OUTPUT,  64/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.TinAlloy;             aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1351,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 4000, NBT_CAPACITY,  80000, NBT_OUTPUT,  80/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.Bronze;               aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1352,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY,  96000, NBT_OUTPUT,  96/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.Brass;                aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1359,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY,  96000, NBT_OUTPUT,  96/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1353,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6400, NBT_CAPACITY,  64000, NBT_OUTPUT,  64/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.IronWood;             aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1360,  1304, aClass, aMat.mToolQuality, 16, aWooden      , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6450, NBT_CAPACITY,  64000, NBT_OUTPUT,  64/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = ANY.Steel;               aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1354,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5000, NBT_CAPACITY, 128000, NBT_OUTPUT, 128/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.FierySteel;           aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1361,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6200, NBT_CAPACITY, 256000, NBT_OUTPUT, 256/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.Cr;                   aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1355,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6300, NBT_CAPACITY, 384000, NBT_OUTPUT, 384/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1356,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5800, NBT_CAPACITY, 448000, NBT_OUTPUT, 448/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1357,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 5800, NBT_CAPACITY, 512000, NBT_OUTPUT, 512/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Strong Steam Engine (" + aMat.getLocal() + ")"       , "Engines"                             ,  1358,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_EFFICIENCY, 6000, NBT_CAPACITY, 512000, NBT_OUTPUT, 512/STEAM_PER_EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "SIS", "PwP", 'S', OP.stick.dat(aMat), 'P', OP.plateDense.dat(aMat), 'I', OP.spring.dat(aMat));

		// Liquid Burning Boxes
		aClass = MultiTileEntityGeneratorLiquid.class;
//      aMat = MT.Pb;                   aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1400,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
//      aMat = MT.Bi;                   aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1401,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  20, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1402,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  24, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1403,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1404,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7000, NBT_OUTPUT,  32, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1405,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 112, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1406,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1407,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1408,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Burning Box (Liquid, " + aMat.getLocal() + ")"       , "Burning Boxes"                       ,  1409,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));

//      aMat = MT.Pb;                   aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1450,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
//      aMat = MT.Bi;                   aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1451,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  80, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1452,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1453,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1454,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1455,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 448, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1456,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 384, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1457,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1458,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Burning Box (Liquid, " + aMat.getLocal() + ")" , "Burning Boxes"                       ,  1459,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,1024, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "IwI", "BBB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

		// Gas Burning Boxes
		aClass = MultiTileEntityGeneratorGas.class;
//      aMat = MT.Pb;                   aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1600,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
//      aMat = MT.Bi;                   aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1601,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  20, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1602,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  24, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1603,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1604,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7000, NBT_OUTPUT,  32, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1605,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 112, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1606,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1607,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1608,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Burning Box (Gas, " + aMat.getLocal() + ")"          , "Burning Boxes"                       ,  1609,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plate.dat(aMat), 'I', OP.pipeSmall.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));

//      aMat = MT.Pb;                   aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1650,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
//      aMat = MT.Bi;                   aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1651,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  80, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1652,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1653,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1654,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  7000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1655,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 448, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1656,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 384, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1657,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1658,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Burning Box (Gas, " + aMat.getLocal() + ")"    , "Burning Boxes"                       ,  1659,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Burn, NBT_EFFICIENCY, 10000, NBT_OUTPUT,1024, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "BwB", "BIB", 'B', Blocks.brick_block, 'P', OP.plateQuintuple.dat(aMat), 'I', OP.pipeLarge.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

		// Fluidized Burning Boxes
		aClass = MultiTileEntityGeneratorFluidBed.class;
		aMat = MT.Pb;                   aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9000,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  5000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bi;                   aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9001,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  4500, NBT_OUTPUT,  80, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9002,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  7500, NBT_OUTPUT,  96, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9003,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9004,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  7000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9005,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 448, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9006,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  8500, NBT_OUTPUT, 384, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9007,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9008,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Fluidized Bed Burning Box (" + aMat.getLocal() + ")"      , "Burning Boxes"                  ,  9009,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT,1024, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plate.dat(aMat), 'C', OP.plateDouble.dat(ANY.Cu));

		aMat = MT.Pb;                   aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9050,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  5000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bi;                   aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9051,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  4500, NBT_OUTPUT, 320, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Bronze;               aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9052,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   7.0F, NBT_RESISTANCE,   7.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  7500, NBT_OUTPUT, 384, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Invar;                aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9053,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.Steel;               aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9054,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  7000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Cr;                   aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9055,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  8500, NBT_OUTPUT,1792, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ti;                   aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9056,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  8500, NBT_OUTPUT,1536, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = ANY.W;                   aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9057,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT,2048, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9058,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY,  9000, NBT_OUTPUT,2048, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Fluidized Bed Burning Box (" + aMat.getLocal() + ")", "Burning Boxes"                  ,  9059,  1104, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.FluidBed, NBT_EFFICIENCY, 10000, NBT_OUTPUT,4096, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "UwU", "BXB", 'B', Blocks.brick_block, 'U', OP.plateCurved.dat(aMat), 'X', OP.rotor.dat(aMat), 'P', OP.plateQuintuple.dat(aMat), 'C', OP.plateDense.dat(ANY.Cu));

		// Heat Exchangers
		aClass = MultiTileEntityGeneratorHotFluid.class;
		aMat = MT.Invar;                aRegistry.add("Heat Exchanger (" + aMat.getLocal() + ")"            , "Heat Exchangers"                     ,  9103,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  16, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachine.dat(aMat), 'O', OP.pipeSmall.dat(ANY.Cu), 'P', OP.plate.dat(MT.Pb), 'C', OP.plateDouble.dat(ANY.Cu           ));
		aMat = ANY.W;                   aRegistry.add("Heat Exchanger (" + aMat.getLocal() + ")"            , "Heat Exchangers"                     ,  9107,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachine.dat(aMat), 'O', OP.pipeSmall.dat(ANY.Cu), 'P', OP.plate.dat(MT.Pb), 'C', OP.plateDouble.dat(MT.AnnealedCopper));
		aMat = MT.TungstenSteel;        aRegistry.add("Heat Exchanger (" + aMat.getLocal() + ")"            , "Heat Exchangers"                     ,  9108,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 128, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachine.dat(aMat), 'O', OP.pipeSmall.dat(ANY.Cu), 'P', OP.plate.dat(MT.Pb), 'C', OP.plateDouble.dat(MT.AnnealedCopper));
		aMat = MT.Ta4HfC5;              aRegistry.add("Heat Exchanger (" + aMat.getLocal() + ")"            , "Heat Exchangers"                     ,  9109,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 256, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachine.dat(aMat), 'O', OP.pipeSmall.dat(ANY.Cu), 'P', OP.plate.dat(MT.Pb), 'C', OP.plateDouble.dat(MT.AnnealedCopper));

		aMat = MT.Invar;                aRegistry.add("Dense Heat Exchanger (" + aMat.getLocal() + ")"      , "Heat Exchangers"                     ,  9153,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  64, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachineQuadruple.dat(aMat), 'O', OP.pipeLarge.dat(ANY.Cu), 'P', OP.plateQuadruple.dat(MT.Pb), 'C', OP.plateDense.dat(ANY.Cu           ));
		aMat = ANY.W;                   aRegistry.add("Dense Heat Exchanger (" + aMat.getLocal() + ")"      , "Heat Exchangers"                     ,  9157,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachineQuadruple.dat(aMat), 'O', OP.pipeLarge.dat(ANY.Cu), 'P', OP.plateQuadruple.dat(MT.Pb), 'C', OP.plateDense.dat(MT.AnnealedCopper));
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Heat Exchanger (" + aMat.getLocal() + ")"      , "Heat Exchangers"                     ,  9158,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY,  9000, NBT_OUTPUT, 512, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachineQuadruple.dat(aMat), 'O', OP.pipeLarge.dat(ANY.Cu), 'P', OP.plateQuadruple.dat(MT.Pb), 'C', OP.plateDense.dat(MT.AnnealedCopper));
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Heat Exchanger (" + aMat.getLocal() + ")"      , "Heat Exchangers"                     ,  9159,  9103, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Hot, NBT_EFFICIENCY, 10000, NBT_OUTPUT,1024, NBT_ENERGY_EMITTED, TD.Energy.HU), "PCP", "OwO", "PMP", 'M', OP.casingMachineQuadruple.dat(aMat), 'O', OP.pipeLarge.dat(ANY.Cu), 'P', OP.plateQuadruple.dat(MT.Pb), 'C', OP.plateDense.dat(MT.AnnealedCopper));

		// Diesel Engines
		aClass = MultiTileEntityMotorLiquid.class;
		aMat = MT.Bronze;               aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9147,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,   16, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		aMat = ANY.Steel;               aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9148,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,   32, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		aMat = MT.Invar;                aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9149,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,   64, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		aMat = MT.Ti;                   aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9197,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  128, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		aMat = MT.TungstenSteel;        aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9198,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  256, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		aMat = MT.Ir;                   aRegistry.add("Diesel Engine (" + aMat.getLocal() + ")"             , "Engines"                             ,  9199,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 10000, NBT_OUTPUT,  512, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeSmall.dat(aMat), 'P', OP.plateCurved.dat(aMat), 'S', OP.stick.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
		*/

		// Reactor Stuffs
		aMat = MT.Th;                   aRegistry.add("Thorium-232 Fuel Rod"                          , "Reactors",  9210,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,   128, NBT_VALUE, 9310)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Cyanite;              aRegistry.add("Cyanite Fuel Rod"                              , "Reactors",  9219,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 32, NBT_NUCLEAR_MAX,	   64, NBT_VALUE, 9319)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.U_238;                aRegistry.add("Uranium-238 Fuel Rod"                          , "Reactors",  9220,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,	  512, NBT_VALUE, 9320)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.U_235;                aRegistry.add("Uranium-235 Fuel Rod"                          , "Reactors",  9221,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 2048, NBT_VALUE, 9321)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Yellorium;            aRegistry.add("Yellorium Fuel Rod"                            , "Reactors",  9229,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   4, NBT_NUCLEAR_OTHER,   4, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,	  256, NBT_VALUE, 9329)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Pu;                   aRegistry.add("Plutonium-244 Fuel Rod"                        , "Reactors",  9230,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 2048, NBT_VALUE, 9330)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Pu_241;               aRegistry.add("Plutonium-241 Fuel Rod"                        , "Reactors",  9231,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	 3072, NBT_VALUE, 9331)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Pu_243;               aRegistry.add("Plutonium-243 Fuel Rod"                        , "Reactors",  9232,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	 4096, NBT_VALUE, 9332)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Pu_239;               aRegistry.add("Plutonium-239 Fuel Rod"                        , "Reactors",  9233,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  2400000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	 4096, NBT_VALUE, 9333)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Blutonium;            aRegistry.add("Blutonium Fuel Rod"                            , "Reactors",  9239,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 1024, NBT_VALUE, 9339)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Am;                   aRegistry.add("Americium-245 Fuel Rod"                        , "Reactors",  9240,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF,  64, NBT_NUCLEAR_OTHER,  64, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 4096, NBT_VALUE, 9340)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Am_241;               aRegistry.add("Americium-241 Fuel Rod"                        , "Reactors",  9241,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	 4096, NBT_VALUE, 9341)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Ludicrite;            aRegistry.add("Ludicrite Fuel Rod"                            , "Reactors",  9249,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  1200000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	 3072, NBT_VALUE, 9349)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Co_60;                aRegistry.add("Cobalt-60 Fuel Rod"                            , "Reactors",  9250,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,   2, NBT_NUCLEAR_OTHER,   2, NBT_NUCLEAR_DIV, 16, NBT_NUCLEAR_MAX,	  256, NBT_VALUE, 9350)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Nq_528;               aRegistry.add("Enriched Naquadah Fuel Rod"                    , "Reactors",  9260,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 128, NBT_NUCLEAR_OTHER, 128, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 8192, NBT_VALUE, 9360)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Nq_522;               aRegistry.add("Naquadria Fuel Rod"                            , "Reactors",  9261,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 12000000000L, NBT_NUCLEAR_SELF, 512, NBT_NUCLEAR_OTHER, 512, NBT_NUCLEAR_DIV,  3, NBT_NUCLEAR_MAX,	16384, NBT_VALUE, 9361)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());

		aMat = MT.Th;                   aRegistry.add("Depleted Thorium-232 Fuel Rod"                 , "Reactors",  9310,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Cyanite;              aRegistry.add("Depleted Cyanite Fuel Rod"                     , "Reactors",  9319,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.U_238;                aRegistry.add("Depleted Uranium-238 Fuel Rod"                 , "Reactors",  9320,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.U_235;                aRegistry.add("Depleted Uranium-235 Fuel Rod"                 , "Reactors",  9321,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.U_233;                aRegistry.add("Uranium-233 Fuel Rod"                          , "Reactors",  9222,  9200, MultiTileEntityReactorRodNuclear.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY,  6000000000L, NBT_NUCLEAR_SELF,  32, NBT_NUCLEAR_OTHER,  32, NBT_NUCLEAR_DIV,  4, NBT_NUCLEAR_MAX,	 2048, NBT_VALUE, 9322)); RM.Canner.addRecipe2(F, 16, 16, OP.stick.mat(aMat, 1), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.Yellorium;            aRegistry.add("Depleted Yellorium Fuel Rod"                   , "Reactors",  9329,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Pu;                   aRegistry.add("Depleted Plutonium-244 Fuel Rod"               , "Reactors",  9330,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Pu_241;               aRegistry.add("Depleted Plutonium-241 Fuel Rod"               , "Reactors",  9331,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Pu_243;               aRegistry.add("Depleted Plutonium-243 Fuel Rod"               , "Reactors",  9332,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Pu_239;               aRegistry.add("Depleted Plutonium-239 Fuel Rod"               , "Reactors",  9333,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Blutonium;            aRegistry.add("Depleted Blutonium Fuel Rod"                   , "Reactors",  9339,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Am;                   aRegistry.add("Depleted Americium-245 Fuel Rod"               , "Reactors",  9340,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Am_241;               aRegistry.add("Depleted Americium-241 Fuel Rod"               , "Reactors",  9341,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Ludicrite;            aRegistry.add("Depleted Ludicrite Fuel Rod"                   , "Reactors",  9349,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Co_60;                aRegistry.add("Depleted Cobalt-60 Fuel Rod"                   , "Reactors",  9350,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Nq_528;               aRegistry.add("Depleted Enriched Naquadah Fuel Rod"           , "Reactors",  9360,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));
		aMat = MT.Nq_522;               aRegistry.add("Depleted Naquadria Fuel Rod"                   , "Reactors",  9361,  9200, MultiTileEntityReactorRodDepleted.class , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid))); RM.Centrifuge.addRecipe1(F, 64, 256, aRegistry.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 1));

		aMat = MT.Th;                   aRegistry.add("Thorium-232 Breeder Rod"                        , "Reactors",  9410,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 144000000L, NBT_VALUE, 9222)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());
		aMat = MT.U_238;                aRegistry.add("Uranium-238 Breeder Rod"                        , "Reactors",  9420,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_MAXDURABILITY, 288000000L, NBT_VALUE, 9233)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), aRegistry.getItem());

		/*
		// Steam Turbines
		aClass = MultiTileEntityTurbineSteam.class;
		aMat = MT.DATA.Heat_T[1];    aRegistry.add("Steam Turbine ("+MT.Bronze       .getLocal()+")" , "Turbines"                            ,  1512,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   24*STEAM_PER_EU, NBT_OUTPUT,   16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Bronze           ));
		aMat = MT.DATA.Heat_T[1];    aRegistry.add("Steam Turbine ("+MT.Brass        .getLocal()+")" , "Turbines"                            ,  1515,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   36*STEAM_PER_EU, NBT_OUTPUT,   24, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Brass            ));
		aMat = MT.DATA.Heat_T[1];    aRegistry.add("Steam Turbine ("+MT.Invar        .getLocal()+")" , "Turbines"                            ,  1518,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   48*STEAM_PER_EU, NBT_OUTPUT,   32, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Invar            ));

		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Steam Turbine ("+ANY.Steel       .getLocal()+")" , "Turbines"                            ,  1522,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   96*STEAM_PER_EU, NBT_OUTPUT,   64, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(ANY.Steel           ));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Steam Turbine ("+MT.Cr           .getLocal()+")" , "Turbines"                            ,  1525,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  144*STEAM_PER_EU, NBT_OUTPUT,   96, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Cr               ));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Steam Turbine ("+MT.IronWood     .getLocal()+")" , "Turbines"                            ,  1527,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.IronWood         ));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Steam Turbine ("+MT.Steeleaf     .getLocal()+")" , "Turbines"                            ,  1528,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Steeleaf         ));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Steam Turbine ("+MT.Thaumium     .getLocal()+")" , "Turbines"                            ,  1529,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  192*STEAM_PER_EU, NBT_OUTPUT,  128, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Thaumium         ));

		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Steam Turbine ("+MT.Ti           .getLocal()+")" , "Turbines"                            ,  1530,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  384*STEAM_PER_EU, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Ti               ));
		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Steam Turbine ("+MT.FierySteel   .getLocal()+")" , "Turbines"                            ,  1531,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  384*STEAM_PER_EU, NBT_OUTPUT,  256, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.FierySteel       ));
		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Steam Turbine ("+MT.Al           .getLocal()+")" , "Turbines"                            ,  1535,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  576*STEAM_PER_EU, NBT_OUTPUT,  384, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Al               ));
		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Steam Turbine ("+MT.Magnalium    .getLocal()+")" , "Turbines"                            ,  1538,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  768*STEAM_PER_EU, NBT_OUTPUT,  512, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Magnalium        ));

		aMat = MT.DATA.Heat_T[4];    aRegistry.add("Steam Turbine ("+MT.VoidMetal    .getLocal()+")" , "Turbines"                            ,  1540,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 1152*STEAM_PER_EU, NBT_OUTPUT,  768, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.VoidMetal        ));
		aMat = MT.DATA.Heat_T[4];    aRegistry.add("Steam Turbine ("+MT.Trinitanium  .getLocal()+")" , "Turbines"                            ,  1545,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 1536*STEAM_PER_EU, NBT_OUTPUT, 1024, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Trinitanium      ));
		aMat = MT.DATA.Heat_T[4];    aRegistry.add("Steam Turbine ("+MT.Graphene     .getLocal()+")" , "Turbines"                            ,  1548,  1538, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 3072*STEAM_PER_EU, NBT_OUTPUT, 2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "TwT", "GSG", "TMT", 'S', OP.stickLong.dat(aMat), 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.rotor.dat(MT.Graphene         ));
		*/
	}

	private static void unsorted2_1(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		// Heaters
				aClass = MultiTileEntityHeaterElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electric Heater ("+VN[0]+")"                         , "Heaters"                             , 10001, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT,   V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu             ));
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Heater ("+VN[1]+")"                         , "Heaters"                             , 10002, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT,   V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu             ));
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Heater ("+VN[2]+")"                         , "Heaters"                             , 10003, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT,   V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt02.dat(MT.Constantan      ));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Heater ("+VN[3]+")"                         , "Heaters"                             , 10004, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT,   V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt04.dat(MT.Kanthal         ));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Heater ("+VN[4]+")"                         , "Heaters"                             , 10005, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT,   V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt08.dat(MT.Nichrome        ));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Heater ("+VN[5]+")"                         , "Heaters"                             , 10006, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT,   V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt16.dat(MT.SiC             ));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electric Heater ("+VN[6]+")"                         , "Heaters"                             , 10007, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT,   V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu             ));
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electric Heater ("+VN[7]+")"                         , "Heaters"                             , 10008, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT,   V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt02.dat(MT.Constantan      ));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electric Heater ("+VN[8]+")"                         , "Heaters"                             , 10009, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT,   V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt04.dat(MT.Kanthal         ));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electric Heater ("+VN[9]+")"                         , "Heaters"                             , 10010, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt08.dat(MT.Nichrome        ));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electric Heater ("+VN[10]+")"                         , "Heaters"                             , 10011, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt16.dat(MT.SiC             ));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electric Heater ("+VN[11]+")"                         , "Heaters"                             , 10012, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu             ));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electric Heater ("+VN[12]+")"                         , "Heaters"                             , 10013, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt02.dat(MT.Constantan      ));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electric Heater ("+VN[13]+")"                         , "Heaters"                             , 10014, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt04.dat(MT.Kanthal         ));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electric Heater ("+VN[14]+")"                         , "Heaters"                             , 10015, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt08.dat(MT.Nichrome        ));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electric Heater ("+VN[15]+")"                         , "Heaters"                             , 10016, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.HU), "TCT", "CMC", "TCd", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'C', OP.wireGt16.dat(MT.SiC             ));

				aClass = MultiTileEntityHeaterFlux.class;
				aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11001, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_OUTPUT, V[0]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10000), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11002, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_OUTPUT, V[1]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10001), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11003, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_OUTPUT, V[2]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10002), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11004, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[3], NBT_OUTPUT, V[3]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10003), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11005, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[4], NBT_OUTPUT, V[4]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10004), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11006, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[5], NBT_OUTPUT, V[5]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11007, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_OUTPUT, V[6]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11008, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_OUTPUT, V[7]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11009, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_OUTPUT, V[8]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11010, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[9], NBT_OUTPUT, V[9]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11011, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[10], NBT_OUTPUT, V[10]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11012, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[11], NBT_OUTPUT, V[11]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11013, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[12], NBT_OUTPUT, V[12]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11014, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[13], NBT_OUTPUT, V[13]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11015, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[14], NBT_OUTPUT, V[14]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Heater (" + aMat.getLocal() + ")"               , "Heaters"                             , 11016, 10001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[15], NBT_OUTPUT, V[15]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.HU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10005), 'S', OP.stickLong.dat(aMat));

				// Engines
				aClass = MultiTileEntityEngineElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electric Engine ("+VN[0]+")"                         , "Engines"                             , 10021,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Engine ("+VN[1]+")"                         , "Engines"                             , 10022,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Engine ("+VN[2]+")"                         , "Engines"                             , 10023,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Engine ("+VN[3]+")"                         , "Engines"                             , 10024,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Engine ("+VN[4]+")"                         , "Engines"                             , 10025,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Engine ("+VN[5]+")"                         , "Engines"                             , 10026,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electric Engine ("+VN[6]+")"                         , "Engines"                             , 10027,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electric Engine ("+VN[7]+")"                         , "Engines"                             , 10028,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electric Engine ("+VN[8]+")"                         , "Engines"                             , 10029,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electric Engine ("+VN[9]+")"                         , "Engines"                             , 10030,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electric Engine ("+VN[10]+")"                         , "Engines"                             , 10031,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electric Engine ("+VN[11]+")"                         , "Engines"                             , 10032,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic   ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electric Engine ("+VN[12]+")"                         , "Engines"                             , 10033,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electric Engine ("+VN[13]+")"                         , "Engines"                             , 10034,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic        ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electric Engine ("+VN[14]+")"                         , "Engines"                             , 10035,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electric Engine ("+VN[15]+")"                         , "Engines"                             , 10036,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.KU), "PhP", "CIC", "PwP", 'P', OP.plateTriple.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic       ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));

				aClass = MultiTileEntityEngineFlux.class;
				aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11021,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10011), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11022,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10011), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11023,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10012), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11024,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10013), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11025,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10014), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11026,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11027,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11028,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11029,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11030,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11031,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11032,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11033,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11034,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11035,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Engine (" + aMat.getLocal() + ")"               , "Engines"                             , 11036,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.KU), "G", "M", "G", 'M', aRegistry.getItem(10015), 'G', OP.gearGt.dat(aMat));

				// Motors
				aClass = MultiTileEntityMotorElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electric Motor ("+VN[0]+")"                          , "Motors"                              , 10041, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_OUTPUT, V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic         ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Motor ("+VN[1]+")"                          , "Motors"                              , 10042, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_OUTPUT, V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic         ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Motor ("+VN[2]+")"                          , "Motors"                              , 10043, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_OUTPUT, V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Motor ("+VN[3]+")"                          , "Motors"                              , 10044, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[3], NBT_OUTPUT, V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Motor ("+VN[4]+")"                          , "Motors"                              , 10045, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[4], NBT_OUTPUT, V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Motor ("+VN[5]+")"                          , "Motors"                              , 10046, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[5], NBT_OUTPUT, V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electric Motor ("+VN[6]+")"                          , "Motors"                              , 10047, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_OUTPUT, V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic         ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electric Motor ("+VN[7]+")"                          , "Motors"                              , 10048, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_OUTPUT, V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electric Motor ("+VN[8]+")"                          , "Motors"                              , 10049, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_OUTPUT, V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electric Motor ("+VN[9]+")"                          , "Motors"                              , 10050, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[9], NBT_OUTPUT, V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electric Motor ("+VN[10]+")"                          , "Motors"                              , 10051, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electric Motor ("+VN[11]+")"                          , "Motors"                              , 10052, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic         ), 'C', OP.wireGt01.dat(ANY.Cu)); // TODO: Temp Recipes
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electric Motor ("+VN[12]+")"                          , "Motors"                              , 10053, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electric Motor ("+VN[13]+")"                          , "Motors"                              , 10054, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electric Motor ("+VN[14]+")"                          , "Motors"                              , 10055, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electric Motor ("+VN[15]+")"                          , "Motors"                              , 10056, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RU), "TIT", "CMC", "TGd", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));

				aClass = MultiTileEntityMotorFlux.class;
				aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11041, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_OUTPUT, V[0]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10021), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11042, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_OUTPUT, V[1]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10021), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11043, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_OUTPUT, V[2]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10022), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11044, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT,  V[3]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10023), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11045, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT,  V[4]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10024), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11046, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11047, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_OUTPUT, V[6]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11048, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_OUTPUT, V[7]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11049, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_OUTPUT, V[8]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11050, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT,  V[9]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11051, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT,  V[10]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11052, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11053, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[12], NBT_OUTPUT, V[12]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11054, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[13], NBT_OUTPUT, V[13]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11055, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[14], NBT_OUTPUT, V[14]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));
				aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Motor (" + aMat.getLocal() + ")"                , "Motors"                              , 11056, 10021, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT,  V[15]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.RU), "GMG", 'M', aRegistry.getItem(10025), 'G', OP.gearGt.dat(aMat));

				// Magnets
				aClass = MultiTileEntityMagnetElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electromagnet ("+VN[0]+")"                           , "Magnets"                             , 10061, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electromagnet ("+VN[1]+")"                           , "Magnets"                             , 10062, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electromagnet ("+VN[2]+")"                           , "Magnets"                             , 10063, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electromagnet ("+VN[3]+")"                           , "Magnets"                             , 10064, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electromagnet ("+VN[4]+")"                           , "Magnets"                             , 10065, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electromagnet ("+VN[5]+")"                           , "Magnets"                             , 10066, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electromagnet ("+VN[6]+")"                           , "Magnets"                             , 10067, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electromagnet ("+VN[7]+")"                           , "Magnets"                             , 10068, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electromagnet ("+VN[8]+")"                           , "Magnets"                             , 10069, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electromagnet ("+VN[9]+")"                           , "Magnets"                             , 10070, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electromagnet ("+VN[10]+")"                           , "Magnets"                             , 10071, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electromagnet ("+VN[11]+")"                           , "Magnets"                             , 10072, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electromagnet ("+VN[12]+")"                           , "Magnets"                             , 10073, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electromagnet ("+VN[13]+")"                           , "Magnets"                             , 10074, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt01.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electromagnet ("+VN[14]+")"                           , "Magnets"                             , 10075, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt02.dat(ANY.Cu));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electromagnet ("+VN[15]+")"                           , "Magnets"                             , 10076, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.MU), "CxC", "CMC", "CwC", 'M', OP.casingMachine.dat(aMat), 'C', OP.wireGt04.dat(MT.AnnealedCopper));

				aClass = MultiTileEntityMagnetFlux.class;
				aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11061, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10031), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11062, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10031), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11063, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10032), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11064, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10033), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11065, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10034), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11066, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11067, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11068, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11069, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11070, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11071, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11072, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11073, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11074, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11075, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));
				aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Magnet (" + aMat.getLocal() + ")"               , "Magnets"                             , 11076, 10031, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.MU), "SSS", "SMS", "SSS", 'M', aRegistry.getItem(10035), 'S', OP.stickLong.dat(aMat));

				// Transformers
				aClass = MultiTileEntityTransformerElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Transformer ("+VN[0]+"-"+VN[1]+")"                   , "Transformers"                        , 10081, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[0], NBT_MULTIPLIER, V[1]/V[0], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Transformer ("+VN[1]+"-"+VN[2]+")"                   , "Transformers"                        , 10082, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[1], NBT_MULTIPLIER, V[2]/V[1], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Transformer ("+VN[2]+"-"+VN[3]+")"                   , "Transformers"                        , 10083, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[2], NBT_MULTIPLIER, V[3]/V[2], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Transformer ("+VN[3]+"-"+VN[4]+")"                   , "Transformers"                        , 10084, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[3], NBT_MULTIPLIER, V[4]/V[3], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Transformer ("+VN[4]+"-"+VN[5]+")"                   , "Transformers"                        , 10085, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[4], NBT_MULTIPLIER, V[5]/V[4], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Transformer ("+VN[5]+"-"+VN[6]+")"                   , "Transformers"                        , 10086, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[5], NBT_MULTIPLIER, V[6]/V[5], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Transformer ("+VN[6]+"-"+VN[7]+")"                   , "Transformers"                        , 10087, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[6], NBT_MULTIPLIER, V[7]/V[6], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Transformer ("+VN[7]+"-"+VN[8]+")"                   , "Transformers"                        , 10088, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[7], NBT_MULTIPLIER, V[8]/V[7], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Transformer ("+VN[8]+"-"+VN[9]+")"                   , "Transformers"                        , 10089, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[8], NBT_MULTIPLIER, V[9]/V[8], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Transformer ("+VN[9]+"-"+VN[10]+")"                   , "Transformers"                        , 10090, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[9], NBT_MULTIPLIER, V[10]/V[9], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Transformer ("+VN[10]+"-"+VN[11]+")"                   , "Transformers"                        , 10091, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[10], NBT_MULTIPLIER, V[11]/V[10], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Transformer ("+VN[11]+"-"+VN[12]+")"                   , "Transformers"                        , 10092, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[11], NBT_MULTIPLIER, V[12]/V[11], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.Cu), 'X', OP.wireGt04.dat(ANY.Cu), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Transformer ("+VN[12]+"-"+VN[13]+")"                   , "Transformers"                        , 10093, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[12], NBT_MULTIPLIER, V[13]/V[12], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Transformer ("+VN[13]+"-"+VN[14]+")"                   , "Transformers"                        , 10094, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[13], NBT_MULTIPLIER, V[14]/V[13], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Transformer ("+VN[14]+"-"+VN[15]+")"                   , "Transformers"                        , 10095, 10041, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[14], NBT_MULTIPLIER, V[15]/V[14], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WIW", "XMx", "WIW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.AnnealedCopper), 'X', OP.wireGt04.dat(MT.AnnealedCopper), 'I', OP.plateDouble.dat(ANY.Fe));

				// Battery Boxes
				for (int i = 0; i < V.length; i++) {
					aRegistry.add("Battery Box ("       +VN[i]+")", "Battery Boxes", 11080+i, 10081, MultiTileEntityBatteryBox      .class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(MT.DATA.Electric_T[i].fRGBaSolid), NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE,  4), "WCW", "WCW", "XMX", 'C', MT.DATA.CABLES_01[i], 'X', OD_CIRCUITS[i], 'W', MT.DATA.WIRES_01[i], 'M', OP.casingMachine.dat(MT.DATA.Electric_T[i]));
					aRegistry.add("Large Battery Box (" +VN[i]+")", "Battery Boxes", 11100+i, 10081, MultiTileEntityBatteryBoxLarge .class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(MT.DATA.Electric_T[i].fRGBaSolid), NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE, 16), "WCW", "WCW", "XMX", 'C', MT.DATA.CABLES_04[i], 'X', OD_CIRCUITS[i], 'W', MT.DATA.WIRES_04[i], 'M', aRegistry.getItem(11080+i));
				}

				// Solar Panels
				aClass = MultiTileEntitySolarPanelElectric.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Solar Panel ("+VN[0]+")"                                         , "Solar Panels"                        , 11120, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[0], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Solar Panel ("+VN[1]+")"                                         , "Solar Panels"                        , 11121, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[1], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Solar Panel ("+VN[2]+")"                                         , "Solar Panels"                        , 11122, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[2], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Solar Panel ("+VN[3]+")"                                         , "Solar Panels"                        , 11123, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[3], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Solar Panel ("+VN[4]+")"                                         , "Solar Panels"                        , 11124, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[4], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Solar Panel ("+VN[5]+")"                                         , "Solar Panels"                        , 11125, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[5], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Solar Panel ("+VN[6]+")"                                         , "Solar Panels"                        , 11126, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[6], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Solar Panel ("+VN[7]+")"                                         , "Solar Panels"                        , 11127, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[7], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Solar Panel ("+VN[8]+")"                                         , "Solar Panels"                        , 11128, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[8], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Solar Panel ("+VN[9]+")"                                         , "Solar Panels"                        , 11129, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[9], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Solar Panel ("+VN[10]+")"                                         , "Solar Panels"                        , 11130, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[10], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Solar Panel ("+VN[11]+")"                                         , "Solar Panels"                        , 11131, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[11], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Solar Panel ("+VN[12]+")"                                         , "Solar Panels"                        , 11132, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[12], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Solar Panel ("+VN[13]+")"                                         , "Solar Panels"                        , 11133, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[13], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Solar Panel ("+VN[14]+")"                                         , "Solar Panels"                        , 11134, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[14], 'S', OP.plateGem.dat(ANY.Si));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Solar Panel ("+VN[15]+")"                                         , "Solar Panels"                        , 11135, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LX, NBT_ENERGY_EMITTED, TD.Energy.EU), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[15], 'S', OP.plateGem.dat(ANY.Si));

				// Long Distance Transfer
				aMat = MT.Pt;                   aRegistry.add("Long Distance Item Pipeline Endpoint"                , "Long Distance Transport"             , 11140, 10060, MultiTileEntityLongDistancePipelineItem.class, aMat.mToolQuality, 16, aMachine      , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid)), "ZPZ", "PMP", "ZPZ", 'M', OP.casingMachine.dat(aMat), 'P', OP.pipeMedium.dat(aMat), 'Z', OP.plate.dat(MT.Plastic));
				aMat = ANY.W;                   aRegistry.add("Long Distance Fluid Pipeline Endpoint"               , "Long Distance Transport"             , 11141, 10060, MultiTileEntityLongDistancePipelineFluid.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid)), "ZPZ", "PMP", "ZPZ", 'M', OP.casingMachine.dat(aMat), 'P', OP.pipeMedium.dat(aMat), 'Z', OP.plate.dat(MT.Plastic));
				aClass = MultiTileEntityLongDistanceTransformer.class;
				aMat = MT.DATA.Electric_T[0];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[0]+")"      , "Long Distance Transport"             , 11151, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[1];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[1]+")"      , "Long Distance Transport"             , 11152, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[2];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[2]+")"      , "Long Distance Transport"             , 11153, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[3];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[3]+")"      , "Long Distance Transport"             , 11154, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[4];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[4]+")"      , "Long Distance Transport"             , 11155, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10044), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[5];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[5]+")"      , "Long Distance Transport"             , 11156, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10045), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[6];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[6]+")"      , "Long Distance Transport"             , 11157, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10046), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[7];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[7]+")"      , "Long Distance Transport"             , 11158, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10047), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[8];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[8]+")"      , "Long Distance Transport"             , 11159, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[9];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[9]+")"      , "Long Distance Transport"             , 11160, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[10];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[10]+")"      , "Long Distance Transport"             , 11161, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[11];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[11]+")"      , "Long Distance Transport"             , 11162, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[12];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[12]+")"      , "Long Distance Transport"             , 11163, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[13];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[13]+")"      , "Long Distance Transport"             , 11164, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[14];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[14]+")"      , "Long Distance Transport"             , 11165, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));
				aMat = MT.DATA.Electric_T[15];   aRegistry.add("Long Distance Transformer Endpoint ("+VN[15]+")"      , "Long Distance Transport"             , 11166, 10060, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15], NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.EU), "WMW", "MxM", "WMW", 'M', aRegistry.getItem(10048), 'W', OP.cableGt04.dat(MT.AnnealedCopper));

				BlocksGT.LongDistPipe01.setCreativeTab(aRegistry.mCreativeTabs.get((short)10060));
				BlocksGT.LongDistWire01.setCreativeTab(aRegistry.mCreativeTabs.get((short)10060));}

	private static void unsorted2_2(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		// BC Lasers
		aClass = MultiTileEntityLaserBuildcraft.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Buildcraft Assembly Laser ("+VN[0]+")"               , "Lasers"                              , 11171, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[0], 'W', MT.DATA.CABLES_04[0], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Buildcraft Assembly Laser ("+VN[1]+")"               , "Lasers"                              , 11172, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_04[1], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Buildcraft Assembly Laser ("+VN[2]+")"               , "Lasers"                              , 11173, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_04[2], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Buildcraft Assembly Laser ("+VN[3]+")"               , "Lasers"                              , 11174, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_04[3], 'D', OP.gemExquisite.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Buildcraft Assembly Laser ("+VN[4]+")"               , "Lasers"                              , 11175, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_04[4], 'D', OP.gemExquisite.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Buildcraft Assembly Laser ("+VN[5]+")"               , "Lasers"                              , 11176, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_04[5], 'D', OP.gemLegendary.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Buildcraft Assembly Laser ("+VN[6]+")"               , "Lasers"                              , 11177, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[0], 'W', MT.DATA.CABLES_04[6], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Buildcraft Assembly Laser ("+VN[7]+")"               , "Lasers"                              , 11178, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_04[7], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Buildcraft Assembly Laser ("+VN[8]+")"               , "Lasers"                              , 11179, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_04[8], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Buildcraft Assembly Laser ("+VN[9]+")"               , "Lasers"                              , 11180, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_04[9], 'D', OP.gemExquisite.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Buildcraft Assembly Laser ("+VN[10]+")"               , "Lasers"                              , 11181, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_04[10], 'D', OP.gemExquisite.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Buildcraft Assembly Laser ("+VN[11]+")"               , "Lasers"                              , 11182, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_04[11], 'D', OP.gemLegendary.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Buildcraft Assembly Laser ("+VN[12]+")"               , "Lasers"                              , 11183, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[0], 'W', MT.DATA.CABLES_04[12], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Buildcraft Assembly Laser ("+VN[13]+")"               , "Lasers"                              , 11184, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_04[13], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Buildcraft Assembly Laser ("+VN[14]+")"               , "Lasers"                              , 11185, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_04[14], 'D', OP.gemFlawless.dat(ANY.Diamond));
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Buildcraft Assembly Laser ("+VN[15]+")"               , "Lasers"                              , 11186, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]*RF_PER_EU, NBT_WASTE_ENERGY, F, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.RF), "CWC", "PDP", "wfh", 'P', OP.plateTriple.dat(aMat), 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_04[15], 'D', OP.gemExquisite.dat(ANY.Diamond));

		// Lasers
		aClass = MultiTileEntityLaserElectric.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electric CO2 Laser ("+VN[0]+")"                      , "Lasers"                              , 11191, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT,   V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[0], 'W', MT.DATA.CABLES_01[0]);
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric CO2 Laser ("+VN[1]+")"                      , "Lasers"                              , 11192, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT,   V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[1], 'W', MT.DATA.CABLES_01[1]);
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric CO2 Laser ("+VN[2]+")"                      , "Lasers"                              , 11193, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT,   V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "W W", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[2], 'W', MT.DATA.CABLES_01[2]);
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric CO2 Laser ("+VN[3]+")"                      , "Lasers"                              , 11194, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT,  V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "WWW", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[3], 'W', MT.DATA.CABLES_01[3]);
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric CO2 Laser ("+VN[4]+")"                      , "Lasers"                              , 11195, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[4], 'W', MT.DATA.CABLES_04[4]);
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric CO2 Laser ("+VN[5]+")"                      , "Lasers"                              , 11196, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[5], 'W', MT.DATA.CABLES_04[5]);
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electric CO2 Laser ("+VN[6]+")"                      , "Lasers"                              , 11197, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT,   V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[6], 'W', MT.DATA.CABLES_01[6]);
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electric CO2 Laser ("+VN[7]+")"                      , "Lasers"                              , 11198, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT,   V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[7], 'W', MT.DATA.CABLES_01[7]);
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electric CO2 Laser ("+VN[8]+")"                      , "Lasers"                              , 11199, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT,   V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "W W", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[8], 'W', MT.DATA.CABLES_01[8]);
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electric CO2 Laser ("+VN[9]+")"                      , "Lasers"                              , 11200, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT,  V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "WWW", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[9], 'W', MT.DATA.CABLES_01[9]);
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electric CO2 Laser ("+VN[10]+")"                      , "Lasers"                              , 11201, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[10], 'W', MT.DATA.CABLES_04[10]);
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electric CO2 Laser ("+VN[11]+")"                      , "Lasers"                              , 11202, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "LWL", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[11], 'W', MT.DATA.CABLES_04[11]);
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electric CO2 Laser ("+VN[12]+")"                      , "Lasers"                              , 11203, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT,   V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[12], 'W', MT.DATA.CABLES_01[12]);
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electric CO2 Laser ("+VN[13]+")"                      , "Lasers"                              , 11204, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT,   V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), " L ", " W ", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[13], 'W', MT.DATA.CABLES_01[13]);
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electric CO2 Laser ("+VN[14]+")"                      , "Lasers"                              , 11205, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT,   V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "L L", "W W", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[14], 'W', MT.DATA.CABLES_01[14]);
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electric CO2 Laser ("+VN[15]+")"                      , "Lasers"                              , 11206, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT,  V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.LU), "LLL", "WWW", "CMC", 'M', OP.casingMachine.dat(aMat), 'L', IL.Comp_Laser_Gas_CO2, 'C', OD_CIRCUITS[15], 'W', MT.DATA.CABLES_01[15]);

		aClass = MultiTileEntityLaserFlux.class;
		aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11211, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT,   V[0]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10101), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11212, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT,   V[1]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10101), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11213, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT,   V[2]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10102), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11214, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT,  V[3]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10103), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11215, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10104), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11216, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11217, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT,   V[6]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11218, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT,   V[7]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11219, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT,   V[8]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11220, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT,  V[9]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11221, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11222, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11223, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT,   V[12]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11224, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT,   V[13]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11225, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT,   V[14]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));
		aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Laser (" + aMat.getLocal() + ")"                , "Lasers"                              , 11226, 10071, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT,  V[15]/8, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.LU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(10105), 'P', OP.plate.dat(aMat));

		// Dynamos
		aClass = MultiTileEntityDynamoElectric.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Electric Dynamo ("+VN[0]+")"                         , "Dynamos"                             , 11231, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[0], NBT_OUTPUT,   V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Electric Dynamo ("+VN[1]+")"                         , "Dynamos"                             , 11232, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[1], NBT_OUTPUT,   V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Electric Dynamo ("+VN[2]+")"                         , "Dynamos"                             , 11233, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[2], NBT_OUTPUT,   V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Electric Dynamo ("+VN[3]+")"                         , "Dynamos"                             , 11234, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[3], NBT_OUTPUT,   V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Electric Dynamo ("+VN[4]+")"                         , "Dynamos"                             , 11235, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[4], NBT_OUTPUT,   V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Electric Dynamo ("+VN[5]+")"                         , "Dynamos"                             , 11236, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[5], NBT_OUTPUT,   V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Electric Dynamo ("+VN[6]+")"                         , "Dynamos"                             , 11237, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[6], NBT_OUTPUT,   V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Electric Dynamo ("+VN[7]+")"                         , "Dynamos"                             , 11238, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[7], NBT_OUTPUT,   V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Electric Dynamo ("+VN[8]+")"                         , "Dynamos"                             , 11239, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[8], NBT_OUTPUT,   V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Electric Dynamo ("+VN[9]+")"                         , "Dynamos"                             , 11240, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[9], NBT_OUTPUT,   V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Electric Dynamo ("+VN[10]+")"                         , "Dynamos"                             , 11241, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[10], NBT_OUTPUT,   V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt08.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Electric Dynamo ("+VN[11]+")"                         , "Dynamos"                             , 11242, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[11], NBT_OUTPUT,   V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.NeodymiumMagnetic    ), 'C', OP.wireGt16.dat(MT.AnnealedCopper));
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Electric Dynamo ("+VN[12]+")"                         , "Dynamos"                             , 11243, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[12], NBT_OUTPUT,   V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Electric Dynamo ("+VN[13]+")"                         , "Dynamos"                             , 11244, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[13], NBT_OUTPUT,   V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.IronMagnetic     ), 'C', OP.wireGt01.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Electric Dynamo ("+VN[14]+")"                         , "Dynamos"                             , 11245, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[14], NBT_OUTPUT,   V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt02.dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Electric Dynamo ("+VN[15]+")"                         , "Dynamos"                             , 11246, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   V[15], NBT_OUTPUT,   V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "TGT", "CMC", "TId", 'M', OP.casingMachineDouble.dat(aMat), 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.stickLong.dat(MT.SteelMagnetic        ), 'C', OP.wireGt04.dat(MT.AnnealedCopper));

		aClass = MultiTileEntityDynamoFlux.class;
		aMat = MT.DATA.Heat_T[0];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11251, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, Math.round(V[0]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10111), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[1];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11252, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, Math.round(V[1]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10111), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[2];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11253, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, Math.round(V[2]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10112), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[3];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11254, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, Math.round(V[3]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10113), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[4];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11255, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, Math.round(V[4]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10114), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[5];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11256, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, Math.round(V[5]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[6];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11257, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, Math.round(V[6]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[7];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11258, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, Math.round(V[7]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[8];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11259, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, Math.round(V[8]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[9];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11260, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, Math.round(V[9]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[10];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11261, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, Math.round(V[10]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[11];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11262, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, Math.round(V[11]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[12];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11263, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, Math.round(V[12]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[13];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11264, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, Math.round(V[13]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[14];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11265, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, Math.round(V[14]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[15];       aRegistry.add("Flux Dynamo (" + aMat.getLocal() + ")"               , "Dynamos"                             , 11266, 10111, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, Math.round(V[15]/0.5), NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.RF), "SMS", "SGS", 'M', aRegistry.getItem(10115), 'G', OP.gearGt.dat(aMat), 'S', OP.stickLong.dat(aMat));

		// Quantum Energizers
		aClass = MultiTileEntityQuantumEnergizerLaser.class;
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T0)"                              , "Quantum Energizers"                  , 11271, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[0], 'S', IL.SENSORS[0], 'E', IL.EMITTERS[0], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T1)"                              , "Quantum Energizers"                  , 11272, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[1], 'S', IL.SENSORS[1], 'E', IL.EMITTERS[1], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T2)"                              , "Quantum Energizers"                  , 11273, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[2], 'S', IL.SENSORS[2], 'E', IL.EMITTERS[2], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T3)"                              , "Quantum Energizers"                  , 11274, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[3], 'S', IL.SENSORS[3], 'E', IL.EMITTERS[3], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T4)"                              , "Quantum Energizers"                  , 11275, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[4], 'S', IL.SENSORS[4], 'E', IL.EMITTERS[4], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T5)"                              , "Quantum Energizers"                  , 11276, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[5], 'S', IL.SENSORS[5], 'E', IL.EMITTERS[5], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T6)"                              , "Quantum Energizers"                  , 11277, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[6], 'S', IL.SENSORS[6], 'E', IL.EMITTERS[6], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T7)"                              , "Quantum Energizers"                  , 11278, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[7], 'S', IL.SENSORS[7], 'E', IL.EMITTERS[7], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T8)"                              , "Quantum Energizers"                  , 11279, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[8], 'S', IL.SENSORS[8], 'E', IL.EMITTERS[8], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T9)"                              , "Quantum Energizers"                  , 11280, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[9], 'S', IL.SENSORS[9], 'E', IL.EMITTERS[9], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T10)"                              , "Quantum Energizers"                  , 11281, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[10], 'S', IL.SENSORS[10], 'E', IL.EMITTERS[10], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T11)"                              , "Quantum Energizers"                  , 11282, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[11], 'S', IL.SENSORS[11], 'E', IL.EMITTERS[11], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T12)"                              , "Quantum Energizers"                  , 11283, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[12], 'S', IL.SENSORS[12], 'E', IL.EMITTERS[12], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T13)"                              , "Quantum Energizers"                  , 11284, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[13], 'S', IL.SENSORS[13], 'E', IL.EMITTERS[13], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T14)"                              , "Quantum Energizers"                  , 11285, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[14], 'S', IL.SENSORS[14], 'E', IL.EMITTERS[14], 'C', IL.Processor_Crystal_Sapphire);
		aMat = MT.Osmiridium;           aRegistry.add("Quantum Energizer (T15)"                              , "Quantum Energizers"                  , 11286, 10121, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  16.0F, NBT_RESISTANCE,  16.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.QU), "CFC", "SME", "CFC", 'M', OP.casingMachine.dat(aMat), 'F', IL.FIELD_GENERATORS[15], 'S', IL.SENSORS[15], 'E', IL.EMITTERS[15], 'C', IL.Processor_Crystal_Sapphire);

		// Crystal Chargers
		for (int i = 0; i < V.length; i++) {
			aRegistry.add("Crystal Charger (T"      +i+")", "Crystal Chargers", 11290+i, 10131, MultiTileEntityCrystalCharger     .class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(MT.DATA.Electric_T[i].fRGBaSolid), NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.LU, NBT_INV_SIZE,  4), "FCF", "FCF", "PMP", 'C', OD_CIRCUITS[i], 'P', IL.Processor_Crystal_Emerald, 'F', IL.FIELD_GENERATORS[i], 'M', OP.casingMachine.dat(MT.DATA.Electric_T[i]));
			aRegistry.add("Large Crystal Charger (T"+i+")", "Crystal Chargers", 11310+i, 10131, MultiTileEntityCrystalChargerLarge.class, MT.DATA.Electric_T[i].mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, MT.DATA.Electric_T[i], NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 4.0F, NBT_COLOR, UT.Code.getRGBInt(MT.DATA.Electric_T[i].fRGBaSolid), NBT_INPUT, V[i], NBT_OUTPUT, V[i], NBT_ENERGY_EMITTED, TD.Energy.LU, NBT_INV_SIZE, 16), "FCF", "FCF", "PMP", 'C', OD_CIRCUITS[i], 'P', IL.Processor_Crystal_Emerald, 'F', IL.FIELD_GENERATORS[i], 'M', aRegistry.getItem(10130+i));
		}

		// Laser Absorbers
		aClass = MultiTileEntityLaserAbsorberElectric.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Laser Absorber ("+VN[0]+")"                          , "Laser Absorbers"                     , 11331, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[0], 'C', OD_CIRCUITS[0], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Laser Absorber ("+VN[1]+")"                          , "Laser Absorbers"                     , 11332, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[1], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Laser Absorber ("+VN[2]+")"                          , "Laser Absorbers"                     , 11333, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Laser Absorber ("+VN[3]+")"                          , "Laser Absorbers"                     , 11334, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Laser Absorber ("+VN[4]+")"                          , "Laser Absorbers"                     , 11335, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Laser Absorber ("+VN[5]+")"                          , "Laser Absorbers"                     , 11336, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[5], 'C', OD_CIRCUITS[5], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Laser Absorber ("+VN[6]+")"                          , "Laser Absorbers"                     , 11337, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[6], 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Laser Absorber ("+VN[7]+")"                          , "Laser Absorbers"                     , 11338, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[7], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Laser Absorber ("+VN[8]+")"                          , "Laser Absorbers"                     , 11339, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[8], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Laser Absorber ("+VN[9]+")"                          , "Laser Absorbers"                     , 11340, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[9], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Laser Absorber ("+VN[10]+")"                          , "Laser Absorbers"                     , 11341, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[10], 'C', OD_CIRCUITS[10], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Laser Absorber ("+VN[11]+")"                          , "Laser Absorbers"                     , 11342, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[11], 'C', OD_CIRCUITS[11], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Laser Absorber ("+VN[12]+")"                          , "Laser Absorbers"                     , 11343, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[12], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Laser Absorber ("+VN[13]+")"                          , "Laser Absorbers"                     , 11344, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[13], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Laser Absorber ("+VN[14]+")"                          , "Laser Absorbers"                     , 11345, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[14], 'P', IL.Processor_Crystal_Sapphire);
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Laser Absorber ("+VN[15]+")"                          , "Laser Absorbers"                     , 11346, 10151, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SCW", "SMP", "SCW", 'M', OP.casingMachine.dat(aMat), 'S', OP.plateGem.dat(ANY.Si), 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[15], 'P', IL.Processor_Crystal_Sapphire);

		// Coolers
		aClass = MultiTileEntityCoolerElectric.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Thermoelectric Cooler ("+VN[0]+")"                   , "Coolers"                             , 11351, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_OUTPUT, V[0]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[0], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Thermoelectric Cooler ("+VN[1]+")"                   , "Coolers"                             , 11352, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_OUTPUT, V[1]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[1], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Thermoelectric Cooler ("+VN[2]+")"                   , "Coolers"                             , 11353, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_OUTPUT, V[2]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[2], 'P', OP.plateDouble     .dat(MT.Si), 'C', OP.plateDouble    .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Thermoelectric Cooler ("+VN[3]+")"                   , "Coolers"                             , 11354, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT, V[3]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[3], 'P', OP.plateTriple     .dat(MT.Si), 'C', OP.plateTriple    .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Thermoelectric Cooler ("+VN[4]+")"                   , "Coolers"                             , 11355, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT, V[4]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[4], 'P', OP.plateQuadruple  .dat(MT.Si), 'C', OP.plateQuadruple .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Thermoelectric Cooler ("+VN[5]+")"                   , "Coolers"                             , 11356, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[5], 'P', OP.plateQuintuple  .dat(MT.Si), 'C', OP.plateQuintuple .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Thermoelectric Cooler ("+VN[6]+")"                   , "Coolers"                             , 11357, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_OUTPUT, V[6]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[6], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Thermoelectric Cooler ("+VN[7]+")"                   , "Coolers"                             , 11358, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[7], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Thermoelectric Cooler ("+VN[8]+")"                   , "Coolers"                             , 11359, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_OUTPUT, V[8]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[8], 'P', OP.plateDouble     .dat(MT.Si), 'C', OP.plateDouble    .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Thermoelectric Cooler ("+VN[9]+")"                   , "Coolers"                             , 11360, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT, V[9]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[9], 'P', OP.plateTriple     .dat(MT.Si), 'C', OP.plateTriple    .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Thermoelectric Cooler ("+VN[10]+")"                   , "Coolers"                             , 11361, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT, V[10]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[10], 'P', OP.plateQuadruple  .dat(MT.Si), 'C', OP.plateQuadruple .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Thermoelectric Cooler ("+VN[11]+")"                   , "Coolers"                             , 11362, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[11], 'P', OP.plateQuintuple  .dat(MT.Si), 'C', OP.plateQuintuple .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Thermoelectric Cooler ("+VN[12]+")"                   , "Coolers"                             , 11363, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_OUTPUT, V[12]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[12], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Thermoelectric Cooler ("+VN[13]+")"                   , "Coolers"                             , 11364, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_OUTPUT, V[13]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[13], 'P', OP.plate           .dat(MT.Si), 'C', OP.plate          .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Thermoelectric Cooler ("+VN[14]+")"                   , "Coolers"                             , 11365, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_OUTPUT, V[14]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[14], 'P', OP.plateDouble     .dat(MT.Si), 'C', OP.plateDouble    .dat(ANY.Cu));
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Thermoelectric Cooler ("+VN[15]+")"                   , "Coolers"                             , 11366, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT, V[15]/4, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "WPw", "CMC", "xPW", 'M', OP.casingMachine.dat(aMat), 'W', MT.DATA.CABLES_01[15], 'P', OP.plateTriple     .dat(MT.Si), 'C', OP.plateTriple    .dat(ANY.Cu));

		aClass = MultiTileEntityCoolerFlux.class;
		aMat = MT.DATA.Heat_T[0];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11371, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_OUTPUT,  V[0]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10161), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[1];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11372, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_OUTPUT,  V[1]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10161), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[2];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11373, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_OUTPUT,  V[2]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10162), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[3];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11374, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_OUTPUT,  V[3]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10163), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[4];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11375, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_OUTPUT,  V[4]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10164), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[5];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11376, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_OUTPUT, V[5]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[6];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11377, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_OUTPUT,  V[6]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[7];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11378, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_OUTPUT,  V[7]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[8];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11379, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_OUTPUT,  V[8]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[9];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11380, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_OUTPUT,  V[9]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[10];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11381, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_OUTPUT,  V[10]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[11];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11382, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_OUTPUT, V[11]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[12];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11383, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[12], NBT_OUTPUT,  V[12]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[13];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11384, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[13], NBT_OUTPUT,  V[13]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[14];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11385, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[14], NBT_OUTPUT,  V[14]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));
		aMat = MT.DATA.Heat_T[15];       aRegistry.add("Thermofluxic Cooler (" + aMat.getLocal() + ")"       , "Coolers"                             , 11386, 10161, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_OUTPUT,  V[15]/16, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RF, NBT_ENERGY_EMITTED, TD.Energy.CU, NBT_ENERGY_EMITTED_2, TD.Energy.HU), "PSP", "PMP", "PSP", 'M', aRegistry.getItem(10165), 'P', OP.plate.dat(aMat), 'S', OP.stickLong.dat(aMat));


		// ZPM Dechargers
		aMat = MT.Osmiridium;           aRegistry.add("ZPM Decharger (Quantum)"                             , "ZPM"                                 , 11391, 14999, MultiTileEntityZPMDechargerQU.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 50.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_ENERGY_EMITTED, TD.Energy.QU, NBT_INV_SIZE, 1), "PCP", "CMC", "FCF", 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Ruby    , 'F', IL.FIELD_GENERATORS[6], 'M', OP.casingMachineDense.dat(aMat));
		aMat = MT.Osmiridium;           aRegistry.add("ZPM Decharger (Electric)"                            , "ZPM"                                 , 11392, 14999, MultiTileEntityZPMDechargerEU.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 4.0F, NBT_RESISTANCE, 50.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_OUTPUT, V[7], NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_INV_SIZE, 1), "PCP", "CMC", "FCF", 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire, 'F', IL.FIELD_GENERATORS[6], 'M', OP.casingMachineDense.dat(aMat));
	}

	private static void unsorted2_3(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		// Batteries
		IL.Battery_Lead_Acid_ULV        .set(aRegistry.add("Lead-Acid Battery ("+VN[0]+")"                  , "Batteries"                           , 14000, 14013, MultiTileEntityBatteryEU8    .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
		IL.Battery_Lead_Acid_LV         .set(aRegistry.add("Lead-Acid Battery ("+VN[1]+")"                  , "Batteries"                           , 14001, 14013, MultiTileEntityBatteryEU32   .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
		IL.Battery_Lead_Acid_MV         .set(aRegistry.add("Lead-Acid Battery ("+VN[2]+")"                  , "Batteries"                           , 14002, 14013, MultiTileEntityBatteryEU128  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_Lead_Acid_HV         .set(aRegistry.add("Lead-Acid Battery ("+VN[3]+")"                  , "Batteries"                           , 14003, 14013, MultiTileEntityBatteryEU512  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_Lead_Acid_EV         .set(aRegistry.add("Lead-Acid Battery ("+VN[4]+")"                  , "Batteries"                           , 14004, 14013, MultiTileEntityBatteryEU2048 .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_Lead_Acid_IV        .set(aRegistry.add("Lead-Acid Battery ("+VN[5]+")"                  , "Batteries"                           , 14005, 14013, MultiTileEntityBatteryEUIV    .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[5], NBT_CAPACITY, V[5] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[5]), null, "gt:re-battery5");
		IL.Battery_Lead_Acid_LuV         .set(aRegistry.add("Lead-Acid Battery ("+VN[6]+")"                  , "Batteries"                           , 14006, 14013, MultiTileEntityBatteryEULuV   .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[6], NBT_CAPACITY, V[6] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[6]), null, "gt:re-battery6");
		IL.Battery_Lead_Acid_ZPM         .set(aRegistry.add("Lead-Acid Battery ("+VN[7]+")"                  , "Batteries"                           , 14007, 14013, MultiTileEntityBatteryEUZPM  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[7], NBT_CAPACITY, V[7] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[2]), null, "gt:re-battery7");
		IL.Battery_Lead_Acid_UV         .set(aRegistry.add("Lead-Acid Battery ("+VN[8]+")"                  , "Batteries"                           , 14008, 14013, MultiTileEntityBatteryEUUV  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[8], NBT_CAPACITY, V[8] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[3]), null, "gt:re-battery8");
		IL.Battery_Lead_Acid_PUV1         .set(aRegistry.add("Lead-Acid Battery ("+VN[9]+")"                  , "Batteries"                           , 14009, 14013, MultiTileEntityBatteryEUPUV1 .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[9], NBT_CAPACITY, V[9] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[4]), null, "gt:re-battery9");
		IL.Battery_Lead_Acid_PUV2        .set(aRegistry.add("Lead-Acid Battery ("+VN[10]+")"                  , "Batteries"                           , 14010, 14013, MultiTileEntityBatteryEUPUV2    .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[10], NBT_CAPACITY, V[10] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[10]), null, "gt:re-battery10");
		IL.Battery_Lead_Acid_PUV3         .set(aRegistry.add("Lead-Acid Battery ("+VN[11]+")"                  , "Batteries"                           , 14011, 14013, MultiTileEntityBatteryEUPUV3   .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[11], NBT_CAPACITY, V[11] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[11]), null, "gt:re-battery11");
		IL.Battery_Lead_Acid_PUV4         .set(aRegistry.add("Lead-Acid Battery ("+VN[12]+")"                  , "Batteries"                           , 14012, 14013, MultiTileEntityBatteryEUPUV4  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[12], NBT_CAPACITY, V[12] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[2]), null, "gt:re-battery12");
		IL.Battery_Lead_Acid_PUV5         .set(aRegistry.add("Lead-Acid Battery ("+VN[13]+")"                  , "Batteries"                           , 14013, 14013, MultiTileEntityBatteryEUPUV5  .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[13], NBT_CAPACITY, V[13] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[3]), null, "gt:re-battery13");
		IL.Battery_Lead_Acid_Omega       .set(aRegistry.add("Lead-Acid Battery ("+VN[14]+")"                  , "Batteries"                           , 14014, 14013, MultiTileEntityBatteryEUOmega .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[14], NBT_CAPACITY, V[14] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[4]), null, "gt:re-battery14");
		IL.Battery_Lead_Acid_MAX       .set(aRegistry.add("Lead-Acid Battery ("+VN[15]+")"                  , "Batteries"                           , 14015, 14013, MultiTileEntityBatteryEUMAX .class, 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Orange]                     , NBT_INPUT, V[15], NBT_CAPACITY, V[15] *   2000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Lead_Acid_Cell_Filled, 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[4]), null, "gt:re-battery15");

		IL.Battery_SU_LV_SulfuricAcid.set(IL.Battery_Lead_Acid_LV.get(1));
		IL.Battery_SU_MV_SulfuricAcid.set(IL.Battery_Lead_Acid_MV.get(1));
		IL.Battery_SU_HV_SulfuricAcid.set(IL.Battery_Lead_Acid_HV.get(1));

		// Just to populate those Fields with something for Compat with outdated Addons.
		IL.Battery_RE_LV_Redstone.set(IL.Battery_Lead_Acid_LV.get(1));
		IL.Battery_RE_MV_Redstone.set(IL.Battery_Lead_Acid_MV.get(1));
		IL.Battery_RE_HV_Redstone.set(IL.Battery_Lead_Acid_HV.get(1));
		IL.Battery_RE_LV_Nikolite.set(IL.Battery_Lead_Acid_LV.get(1));
		IL.Battery_RE_MV_Nikolite.set(IL.Battery_Lead_Acid_MV.get(1));
		IL.Battery_RE_HV_Nikolite.set(IL.Battery_Lead_Acid_HV.get(1));
		IL.Battery_RE_LV_Teslatite.set(IL.Battery_Lead_Acid_LV.get(1));
		IL.Battery_RE_MV_Teslatite.set(IL.Battery_Lead_Acid_MV.get(1));
		IL.Battery_RE_HV_Teslatite.set(IL.Battery_Lead_Acid_HV.get(1));
		IL.Battery_RE_LV_Electrotine.set(IL.Battery_Lead_Acid_LV.get(1));
		IL.Battery_RE_MV_Electrotine.set(IL.Battery_Lead_Acid_MV.get(1));
		IL.Battery_RE_HV_Electrotine.set(IL.Battery_Lead_Acid_HV.get(1));

		IL.Battery_Alkaline_ULV         .set(aRegistry.add("Alkaline Battery ("+VN[0]+")"                   , "Batteries"                           , 14020, 14013, MultiTileEntityBatteryEU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
		IL.Battery_Alkaline_LV          .set(aRegistry.add("Alkaline Battery ("+VN[1]+")"                   , "Batteries"                           , 14021, 14013, MultiTileEntityBatteryEU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
		IL.Battery_Alkaline_MV          .set(aRegistry.add("Alkaline Battery ("+VN[2]+")"                   , "Batteries"                           , 14022, 14013, MultiTileEntityBatteryEU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_Alkaline_HV          .set(aRegistry.add("Alkaline Battery ("+VN[3]+")"                   , "Batteries"                           , 14023, 14013, MultiTileEntityBatteryEU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_Alkaline_EV          .set(aRegistry.add("Alkaline Battery ("+VN[4]+")"                   , "Batteries"                           , 14024, 14013, MultiTileEntityBatteryEU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_Alkaline_IV         .set(aRegistry.add("Alkaline Battery ("+VN[5]+")"                   , "Batteries"                           , 14025, 14013, MultiTileEntityBatteryEUIV   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[5], NBT_CAPACITY, V[5] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[5]), null, "gt:re-battery0");
		IL.Battery_Alkaline_LuV          .set(aRegistry.add("Alkaline Battery ("+VN[6]+")"                   , "Batteries"                           , 14026, 14013, MultiTileEntityBatteryEULuV  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[6], NBT_CAPACITY, V[6] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[6]), null, "gt:re-battery1");
		IL.Battery_Alkaline_ZPM          .set(aRegistry.add("Alkaline Battery ("+VN[7]+")"                   , "Batteries"                           , 14027, 14013, MultiTileEntityBatteryEUZPM .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[7], NBT_CAPACITY, V[7] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_Alkaline_UV          .set(aRegistry.add("Alkaline Battery ("+VN[8]+")"                   , "Batteries"                           , 14028, 14013, MultiTileEntityBatteryEUUV .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[8], NBT_CAPACITY, V[8] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_Alkaline_PUV1          .set(aRegistry.add("Alkaline Battery ("+VN[9]+")"                   , "Batteries"                           , 14029, 14013, MultiTileEntityBatteryEUPUV1.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[9], NBT_CAPACITY, V[9] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_Alkaline_PUV2         .set(aRegistry.add("Alkaline Battery ("+VN[10]+")"                   , "Batteries"                           , 14030, 14013, MultiTileEntityBatteryEUPUV2   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[10], NBT_CAPACITY, V[10] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[10]), null, "gt:re-battery0");
		IL.Battery_Alkaline_PUV3          .set(aRegistry.add("Alkaline Battery ("+VN[11]+")"                   , "Batteries"                           , 14031, 14013, MultiTileEntityBatteryEUPUV3  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[11], NBT_CAPACITY, V[11] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[11]), null, "gt:re-battery1");
		IL.Battery_Alkaline_PUV4          .set(aRegistry.add("Alkaline Battery ("+VN[12]+")"                   , "Batteries"                           , 14032, 14013, MultiTileEntityBatteryEUPUV4 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[12], NBT_CAPACITY, V[12] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_Alkaline_PUV5          .set(aRegistry.add("Alkaline Battery ("+VN[13]+")"                   , "Batteries"                           , 14033, 14013, MultiTileEntityBatteryEUPUV5 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[13], NBT_CAPACITY, V[13] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_Alkaline_Omega          .set(aRegistry.add("Alkaline Battery ("+VN[14]+")"                   , "Batteries"                           , 14034, 14013, MultiTileEntityBatteryEUOmega.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[14], NBT_CAPACITY, V[14] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_Alkaline_MAX          .set(aRegistry.add("Alkaline Battery ("+VN[15]+")"                   , "Batteries"                           , 14035, 14013, MultiTileEntityBatteryEUMAX.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[15], NBT_CAPACITY, V[15] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_Alkaline_Cell_Filled, 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");

		// Just to populate those Fields with something for Compat with outdated Addons.
		IL.Battery_SU_LV_Mercury.set(IL.Battery_Alkaline_LV.get(1));
		IL.Battery_SU_MV_Mercury.set(IL.Battery_Alkaline_MV.get(1));
		IL.Battery_SU_HV_Mercury.set(IL.Battery_Alkaline_HV.get(1));

		IL.Battery_NiCd_ULV             .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[0]+")"             , "Batteries"                           , 14040, 14013, MultiTileEntityBatteryEU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[0]), null, "gt:re-battery0");
		IL.Battery_NiCd_LV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[1]+")"             , "Batteries"                           , 14041, 14013, MultiTileEntityBatteryEU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[1]), null, "gt:re-battery1");
		IL.Battery_NiCd_MV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[2]+")"             , "Batteries"                           , 14042, 14013, MultiTileEntityBatteryEU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_NiCd_HV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[3]+")"             , "Batteries"                           , 14043, 14013, MultiTileEntityBatteryEU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_NiCd_EV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[4]+")"             , "Batteries"                           , 14044, 14013, MultiTileEntityBatteryEU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_NiCd_IV             .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[5]+")"             , "Batteries"                           , 14045, 14013, MultiTileEntityBatteryEUIV   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[5], NBT_CAPACITY, V[5] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[5]), null, "gt:re-battery0");
		IL.Battery_NiCd_LuV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[6]+")"             , "Batteries"                           , 14046, 14013, MultiTileEntityBatteryEULuV  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[6], NBT_CAPACITY, V[6] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[6]), null, "gt:re-battery1");
		IL.Battery_NiCd_ZPM              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[7]+")"             , "Batteries"                           , 14047, 14013, MultiTileEntityBatteryEUZPM .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[7], NBT_CAPACITY, V[7] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_NiCd_UV              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[8]+")"             , "Batteries"                           , 14048, 14013, MultiTileEntityBatteryEUUV .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[8], NBT_CAPACITY, V[8] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_NiCd_PUV1              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[9]+")"             , "Batteries"                           , 14049, 14013, MultiTileEntityBatteryEUPUV1.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[9], NBT_CAPACITY, V[9] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_NiCd_PUV2             .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[10]+")"             , "Batteries"                           , 14050, 14013, MultiTileEntityBatteryEUPUV2   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[10], NBT_CAPACITY, V[10] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "B " , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[10]), null, "gt:re-battery0");
		IL.Battery_NiCd_PUV3              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[11]+")"             , "Batteries"                           , 14051, 14013, MultiTileEntityBatteryEUPUV3  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[11], NBT_CAPACITY, V[11] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), " Wx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[11]), null, "gt:re-battery1");
		IL.Battery_NiCd_PUV4              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[12]+")"             , "Batteries"                           , 14052, 14013, MultiTileEntityBatteryEUPUV4 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[12], NBT_CAPACITY, V[12] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_NiCd_PUV5              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[13]+")"             , "Batteries"                           , 14053, 14013, MultiTileEntityBatteryEUPUV5 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[13], NBT_CAPACITY, V[13] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_NiCd_Omega              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[14]+")"             , "Batteries"                           , 14054, 14013, MultiTileEntityBatteryEUOmega.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[14], NBT_CAPACITY, V[14] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_NiCd_MAX              .set(aRegistry.add("Nickel-Cadmium Battery ("+VN[15]+")"             , "Batteries"                           , 14055, 14013, MultiTileEntityBatteryEUMAX.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Lime]                       , NBT_INPUT, V[15], NBT_CAPACITY, V[15] *   4000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_NiCd_Cell_Filled, 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");

		IL.Battery_RE_LV_Cadmium.set(IL.Battery_NiCd_LV.get(1));
		IL.Battery_RE_MV_Cadmium.set(IL.Battery_NiCd_MV.get(1));
		IL.Battery_RE_HV_Cadmium.set(IL.Battery_NiCd_HV.get(1));

		IL.Battery_LiCoO2_ULV           .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[0]+")"             , "Batteries"                           , 14060, 14013, MultiTileEntityBatteryAdvEU8   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[0], NBT_CAPACITY, V[0] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[0], 'C', OD_CIRCUITS[0]), null, "gt:re-battery0");
		IL.Battery_LiCoO2_LV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[1]+")"             , "Batteries"                           , 14061, 14013, MultiTileEntityBatteryAdvEU32  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[1], NBT_CAPACITY, V[1] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[1]), null, "gt:re-battery1");
		IL.Battery_LiCoO2_MV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[2]+")"             , "Batteries"                           , 14062, 14013, MultiTileEntityBatteryAdvEU128 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[2], NBT_CAPACITY, V[2] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_LiCoO2_HV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[3]+")"             , "Batteries"                           , 14063, 14013, MultiTileEntityBatteryAdvEU512 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[3], NBT_CAPACITY, V[3] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_LiCoO2_EV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[4]+")"             , "Batteries"                           , 14064, 14013, MultiTileEntityBatteryAdvEU2048.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[4], NBT_CAPACITY, V[4] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_LiCoO2_IV           .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[5]+")"             , "Batteries"                           , 14065, 14013, MultiTileEntityBatteryAdvEUIV   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[5], NBT_CAPACITY, V[5] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[5], 'C', OD_CIRCUITS[5]), null, "gt:re-battery0");
		IL.Battery_LiCoO2_LuV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[6]+")"             , "Batteries"                           , 14066, 14013, MultiTileEntityBatteryAdvEULuV  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[6], NBT_CAPACITY, V[6] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[6], 'C', OD_CIRCUITS[6]), null, "gt:re-battery1");
		IL.Battery_LiCoO2_ZPM            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[7]+")"             , "Batteries"                           , 14067, 14013, MultiTileEntityBatteryAdvEUZPM .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[7], NBT_CAPACITY, V[7] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[7]), null, "gt:re-battery2");
		IL.Battery_LiCoO2_UV            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[8]+")"             , "Batteries"                           , 14068, 14013, MultiTileEntityBatteryAdvEUUV .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[8], NBT_CAPACITY, V[8] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[8]), null, "gt:re-battery3");
		IL.Battery_LiCoO2_PUV1            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[9]+")"             , "Batteries"                           , 14069, 14013, MultiTileEntityBatteryAdvEUPUV1.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[9], NBT_CAPACITY, V[9] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[9]), null, "gt:re-battery4");
		IL.Battery_LiCoO2_PUV2           .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[10]+")"             , "Batteries"                           , 14070, 14013, MultiTileEntityBatteryAdvEUPUV2   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[10], NBT_CAPACITY, V[10] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[10], 'C', OD_CIRCUITS[10]), null, "gt:re-battery0");
		IL.Battery_LiCoO2_PUV3            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[11]+")"             , "Batteries"                           , 14071, 14013, MultiTileEntityBatteryAdvEUPUV3  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[11], NBT_CAPACITY, V[11] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[11], 'C', OD_CIRCUITS[11]), null, "gt:re-battery1");
		IL.Battery_LiCoO2_PUV4            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[12]+")"             , "Batteries"                           , 14072, 14013, MultiTileEntityBatteryAdvEUPUV4 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[12], NBT_CAPACITY, V[12] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[12]), null, "gt:re-battery2");
		IL.Battery_LiCoO2_PUV5            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[13]+")"             , "Batteries"                           , 14073, 14013, MultiTileEntityBatteryAdvEUPUV5 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[13], NBT_CAPACITY, V[13] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[13]), null, "gt:re-battery3");
		IL.Battery_LiCoO2_Omega            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[14]+")"             , "Batteries"                           , 14074, 14013, MultiTileEntityBatteryAdvEUOmega.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[14], NBT_CAPACITY, V[14] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[14]), null, "gt:re-battery4");
		IL.Battery_LiCoO2_MAX            .set(aRegistry.add("Lithium-Cobalt Battery ("+VN[15]+")"             , "Batteries"                           , 14075, 14013, MultiTileEntityBatteryAdvEUMAX.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Blue]                       , NBT_INPUT, V[15], NBT_CAPACITY, V[15] *  64000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiCoO2_Cell_Filled, 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[15]), null, "gt:re-battery4");

		IL.Battery_RE_LV_Lithium.set(IL.Battery_LiCoO2_LV.get(1));
		IL.Battery_RE_MV_Lithium.set(IL.Battery_LiCoO2_MV.get(1));
		IL.Battery_RE_HV_Lithium.set(IL.Battery_LiCoO2_HV.get(1));

		IL.Battery_LiMn_ULV             .set(aRegistry.add("Lithium-Manganese Battery ("+VN[0]+")"          , "Batteries"                           , 14080, 14013, MultiTileEntityBatteryAdvEU8   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[0], 'C', OD_CIRCUITS[0]), null, "gt:re-battery0");
		IL.Battery_LiMn_LV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[1]+")"          , "Batteries"                           , 14081, 14013, MultiTileEntityBatteryAdvEU32  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[1], 'C', OD_CIRCUITS[1]), null, "gt:re-battery1");
		IL.Battery_LiMn_MV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[2]+")"          , "Batteries"                           , 14082, 14013, MultiTileEntityBatteryAdvEU128 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[2], 'C', OD_CIRCUITS[2]), null, "gt:re-battery2");
		IL.Battery_LiMn_HV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[3]+")"          , "Batteries"                           , 14083, 14013, MultiTileEntityBatteryAdvEU512 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[3], 'C', OD_CIRCUITS[3]), null, "gt:re-battery3");
		IL.Battery_LiMn_EV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[4]+")"          , "Batteries"                           , 14084, 14013, MultiTileEntityBatteryAdvEU2048.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[4], 'C', OD_CIRCUITS[4]), null, "gt:re-battery4");
		IL.Battery_LiMn_IV             .set(aRegistry.add("Lithium-Manganese Battery ("+VN[5]+")"          , "Batteries"                           , 14085, 14013, MultiTileEntityBatteryAdvEUIV   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[5], NBT_CAPACITY, V[5] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[5], 'C', OD_CIRCUITS[5]), null, "gt:re-battery0");
		IL.Battery_LiMn_LuV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[6]+")"          , "Batteries"                           , 14086, 14013, MultiTileEntityBatteryAdvEULuV  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[6], NBT_CAPACITY, V[6] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[6], 'C', OD_CIRCUITS[6]), null, "gt:re-battery1");
		IL.Battery_LiMn_ZPM              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[7]+")"          , "Batteries"                           , 14087, 14013, MultiTileEntityBatteryAdvEUZPM .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[7], NBT_CAPACITY, V[7] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[7], 'C', OD_CIRCUITS[7]), null, "gt:re-battery2");
		IL.Battery_LiMn_UV              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[8]+")"          , "Batteries"                           , 14088, 14013, MultiTileEntityBatteryAdvEUUV .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[8], NBT_CAPACITY, V[8] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[8], 'C', OD_CIRCUITS[8]), null, "gt:re-battery3");
		IL.Battery_LiMn_PUV1              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[9]+")"          , "Batteries"                           , 14089, 14013, MultiTileEntityBatteryAdvEUPUV1.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[9], NBT_CAPACITY, V[9] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[9], 'C', OD_CIRCUITS[9]), null, "gt:re-battery4");
		IL.Battery_LiMn_PUV2             .set(aRegistry.add("Lithium-Manganese Battery ("+VN[10]+")"          , "Batteries"                           , 14090, 14013, MultiTileEntityBatteryAdvEUPUV2   .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[10], NBT_CAPACITY, V[10] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "Wx" , "BC" , "P " , 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[10], 'C', OD_CIRCUITS[10]), null, "gt:re-battery0");
		IL.Battery_LiMn_PUV3              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[11]+")"          , "Batteries"                           , 14091, 14013, MultiTileEntityBatteryAdvEUPUV3  .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[11], NBT_CAPACITY, V[11] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CWx", "PBP", " B ", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[11], 'C', OD_CIRCUITS[11]), null, "gt:re-battery1");
		IL.Battery_LiMn_PUV4              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[12]+")"          , "Batteries"                           , 14092, 14013, MultiTileEntityBatteryAdvEUPUV4 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[12], NBT_CAPACITY, V[12] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "PBP", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[12], 'C', OD_CIRCUITS[12]), null, "gt:re-battery2");
		IL.Battery_LiMn_PUV5              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[13]+")"          , "Batteries"                           , 14093, 14013, MultiTileEntityBatteryAdvEUPUV5 .class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[13], NBT_CAPACITY, V[13] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WxW", "BCB", "BPB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[13], 'C', OD_CIRCUITS[13]), null, "gt:re-battery3");
		IL.Battery_LiMn_Omega              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[14]+")"          , "Batteries"                           , 14094, 14013, MultiTileEntityBatteryAdvEUOmega.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[14], NBT_CAPACITY, V[14] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[14], 'C', OD_CIRCUITS[14]), null, "gt:re-battery4");
		IL.Battery_LiMn_MAX              .set(aRegistry.add("Lithium-Manganese Battery ("+VN[15]+")"          , "Batteries"                           , 14095, 14013, MultiTileEntityBatteryAdvEUMAX.class   , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, DYES_INT[DYE_INDEX_Green]                      , NBT_INPUT, V[15], NBT_CAPACITY, V[15] * 128000, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "WPW", "BCB", "BBB", 'P', OP.plate.dat(MT.BatteryAlloy), 'B', IL.Battery_LiMn_Cell_Filled, 'W', MT.DATA.CABLES_01[15], 'C', OD_CIRCUITS[15]), null, "gt:re-battery4");

		// Just to populate those Fields with something for Compat with outdated Addons.
		IL.Battery_RE_LV_Sodium.set(IL.Battery_LiMn_LV.get(1));
		IL.Battery_RE_MV_Sodium.set(IL.Battery_LiMn_MV.get(1));
		IL.Battery_RE_HV_Sodium.set(IL.Battery_LiMn_HV.get(1));

		CR.shaped(IL.Tool_Scanner       .get(1), CR.DEF_REV, "EXR", "CPU", "BXB", 'B', IL.Battery_Alkaline_HV, 'X', OP.plate.dat(MT.Cr), 'U', OD_USB_STICKS[3], 'C', OD_USB_CABLES[3], 'E', IL.EMITTERS[4], 'R', IL.SENSORS[4], 'P', IL.Processor_Crystal_Sapphire);
		CR.shaped(IL.Tool_Cropnalyzer   .get(1), CR.DEF_REV, "EXR", "CPU", "BXB", 'B', IL.Battery_Alkaline_MV, 'X', OP.plate.dat(MT.Al), 'U', OD_USB_STICKS[1], 'C', OD_USB_CABLES[1], 'E', IL.EMITTERS[2], 'R', IL.SENSORS[2], 'P', OD_CIRCUITS[6]);

		IL.Crystal_Energium_Red_ULV     .set(aRegistry.add("Red Energium Crystal (T0)"                      , "Batteries"                           , 14500, 14013, MultiTileEntityBatteryLU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Red_LV      .set(aRegistry.add("Red Energium Crystal (T1)"                      , "Batteries"                           , 14501, 14013, MultiTileEntityBatteryLU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Red_MV      .set(aRegistry.add("Red Energium Crystal (T2)"                      , "Batteries"                           , 14502, 14013, MultiTileEntityBatteryLU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Red_HV      .set(aRegistry.add("Red Energium Crystal (T3)"                      , "Batteries"                           , 14503, 14013, MultiTileEntityBatteryLU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
		IL.Crystal_Energium_Red_EV      .set(aRegistry.add("Red Energium Crystal (T4)"                      , "Batteries"                           , 14504, 14013, MultiTileEntityBatteryLU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
		IL.Crystal_Energium_Red_IV      .set(aRegistry.add("Red Energium Crystal (T5)"                      , "Batteries"                           , 14505, 14013, MultiTileEntityBatteryLU8192.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[5], NBT_CAPACITY, V[5] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");
		IL.Crystal_Energium_Red_LuV     .set(aRegistry.add("Red Energium Crystal (T6)"                      , "Batteries"                           , 14506, 14013, MultiTileEntityBatteryLULuV   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[6], NBT_CAPACITY, V[6] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Red_ZPM      .set(aRegistry.add("Red Energium Crystal (T7)"                      , "Batteries"                           , 14507, 14013, MultiTileEntityBatteryLUZPM  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[7], NBT_CAPACITY, V[7] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Red_UV      .set(aRegistry.add("Red Energium Crystal (T8)"                      , "Batteries"                           , 14508, 14013, MultiTileEntityBatteryLUUV .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[8], NBT_CAPACITY, V[8] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Red_PUV1      .set(aRegistry.add("Red Energium Crystal (T9)"                      , "Batteries"                           , 14509, 14013, MultiTileEntityBatteryLUPUV1 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[9], NBT_CAPACITY, V[9] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
		IL.Crystal_Energium_Red_PUV2      .set(aRegistry.add("Red Energium Crystal (T10)"                      , "Batteries"                           , 14510, 14013, MultiTileEntityBatteryLUPUV2.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[10], NBT_CAPACITY, V[10] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
		IL.Crystal_Energium_Red_PUV3      .set(aRegistry.add("Red Energium Crystal (T11)"                      , "Batteries"                           , 14511, 14013, MultiTileEntityBatteryLUPUV3.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[11], NBT_CAPACITY, V[11] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");
		IL.Crystal_Energium_Red_PUV4     .set(aRegistry.add("Red Energium Crystal (T12)"                      , "Batteries"                           , 14512, 14013, MultiTileEntityBatteryLUPUV4   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[12], NBT_CAPACITY, V[12] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Red_PUV5      .set(aRegistry.add("Red Energium Crystal (T13)"                      , "Batteries"                           , 14513, 14013, MultiTileEntityBatteryLUPUV5  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[13], NBT_CAPACITY, V[13] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Red_Omega      .set(aRegistry.add("Red Energium Crystal (T14)"                      , "Batteries"                           , 14514, 14013, MultiTileEntityBatteryLUOmega .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[14], NBT_CAPACITY, V[14] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Red_MAX      .set(aRegistry.add("Red Energium Crystal (T15)"                      , "Batteries"                           , 14515, 14013, MultiTileEntityBatteryLUMAX .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumRed.fRGBaSolid)   , NBT_INPUT, V[15], NBT_CAPACITY, V[15] * 400000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");

		IL.EnergyCrystal_RE_LV_Energium.set(IL.Crystal_Energium_Red_LV.get(1));
		IL.EnergyCrystal_RE_MV_Energium.set(IL.Crystal_Energium_Red_MV.get(1));
		IL.EnergyCrystal_RE_HV_Energium.set(IL.Crystal_Energium_Red_HV.get(1));
		IL.EnergyCrystal_RE_EV_Energium.set(IL.Crystal_Energium_Red_EV.get(1));
		IL.EnergyCrystal_RE_IV_Energium.set(IL.Crystal_Energium_Red_IV.get(1));

		IL.Crystal_Energium_Cyan_ULV    .set(aRegistry.add("Cyan Energium Crystal (T0)"                     , "Batteries"                           , 14520, 14013, MultiTileEntityBatteryLU8   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[0], NBT_CAPACITY, V[0] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Cyan_LV     .set(aRegistry.add("Cyan Energium Crystal (T1)"                     , "Batteries"                           , 14521, 14013, MultiTileEntityBatteryLU32  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[1], NBT_CAPACITY, V[1] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Cyan_MV     .set(aRegistry.add("Cyan Energium Crystal (T2)"                     , "Batteries"                           , 14522, 14013, MultiTileEntityBatteryLU128 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[2], NBT_CAPACITY, V[2] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Cyan_HV     .set(aRegistry.add("Cyan Energium Crystal (T3)"                     , "Batteries"                           , 14523, 14013, MultiTileEntityBatteryLU512 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[3], NBT_CAPACITY, V[3] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
		IL.Crystal_Energium_Cyan_EV     .set(aRegistry.add("Cyan Energium Crystal (T4)"                     , "Batteries"                           , 14524, 14013, MultiTileEntityBatteryLU2048.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[4], NBT_CAPACITY, V[4] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
		IL.Crystal_Energium_Cyan_IV     .set(aRegistry.add("Cyan Energium Crystal (T5)"                     , "Batteries"                           , 14525, 14013, MultiTileEntityBatteryLU8192.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[5], NBT_CAPACITY, V[5] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");
		IL.Crystal_Energium_Cyan_LuV    .set(aRegistry.add("Cyan Energium Crystal (T6)"                     , "Batteries"                           , 14526, 14013, MultiTileEntityBatteryLULuV   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[6], NBT_CAPACITY, V[6] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Cyan_ZPM     .set(aRegistry.add("Cyan Energium Crystal (T7)"                     , "Batteries"                           , 14527, 14013, MultiTileEntityBatteryLUZPM  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[7], NBT_CAPACITY, V[7] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Cyan_UV     .set(aRegistry.add("Cyan Energium Crystal (T8)"                     , "Batteries"                           , 14528, 14013, MultiTileEntityBatteryLUUV .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[8], NBT_CAPACITY, V[8] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Cyan_PUV1     .set(aRegistry.add("Cyan Energium Crystal (T9)"                     , "Batteries"                           , 14529, 14013, MultiTileEntityBatteryLUPUV1 .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[9], NBT_CAPACITY, V[9] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");
		IL.Crystal_Energium_Cyan_PUV2     .set(aRegistry.add("Cyan Energium Crystal (T10)"                     , "Batteries"                           , 14530, 14013, MultiTileEntityBatteryLUPUV2.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[10], NBT_CAPACITY, V[10] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal4");
		IL.Crystal_Energium_Cyan_PUV3     .set(aRegistry.add("Cyan Energium Crystal (T11)"                     , "Batteries"                           , 14531, 14013, MultiTileEntityBatteryLUPUV3.class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[11], NBT_CAPACITY, V[11] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal5");
		IL.Crystal_Energium_Cyan_PUV4    .set(aRegistry.add("Cyan Energium Crystal (T12)"                     , "Batteries"                           , 14532, 14013, MultiTileEntityBatteryLUPUV4   .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[12], NBT_CAPACITY, V[12] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal0");
		IL.Crystal_Energium_Cyan_PUV5     .set(aRegistry.add("Cyan Energium Crystal (T13)"                     , "Batteries"                           , 14533, 14013, MultiTileEntityBatteryLUPUV5  .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[13], NBT_CAPACITY, V[13] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal1");
		IL.Crystal_Energium_Cyan_Omega     .set(aRegistry.add("Cyan Energium Crystal (T14)"                     , "Batteries"                           , 14534, 14013, MultiTileEntityBatteryLUOmega .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[14], NBT_CAPACITY, V[14] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal2");
		IL.Crystal_Energium_Cyan_MAX     .set(aRegistry.add("Cyan Energium Crystal (T15)"                     , "Batteries"                           , 14535, 14013, MultiTileEntityBatteryLUMAX .class      , 0, 16, aUtilMetal , UT.NBT.make(NBT_HARDNESS,   0.5F, NBT_RESISTANCE,   3.0F, NBT_COLOR, UT.Code.getRGBInt(MT.EnergiumCyan.fRGBaSolid)  , NBT_INPUT, V[15], NBT_CAPACITY, V[15] * 800000, NBT_ENERGY_ACCEPTED, TD.Energy.LU)), null, "gt:re-crystal3");

		OreDictManager.INSTANCE.setTarget(OP.gemChipped     , MT.EnergiumRed, IL.Crystal_Energium_Red_ULV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemFlawed      , MT.EnergiumRed, IL.Crystal_Energium_Red_LV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gem            , MT.EnergiumRed, IL.Crystal_Energium_Red_MV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemFlawless    , MT.EnergiumRed, IL.Crystal_Energium_Red_HV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemExquisite   , MT.EnergiumRed, IL.Crystal_Energium_Red_EV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemLegendary   , MT.EnergiumRed, IL.Crystal_Energium_Red_IV.get(1));

		OreDictManager.INSTANCE.setTarget(OP.gemChipped     , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_ULV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemFlawed      , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_LV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gem            , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_MV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemFlawless    , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_HV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemExquisite   , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_EV.get(1));
		OreDictManager.INSTANCE.setTarget(OP.gemLegendary   , MT.EnergiumCyan, IL.Crystal_Energium_Cyan_IV.get(1));

		IL.ZPM                          .set(aRegistry.add("Zero-Point-Module (ZPM)"                        , "ZPM"                                 , 14999, 14999, MultiTileEntityZPM.class, 0, 16, aUtilMetal, UT.NBT.make(NBT_HARDNESS, 0.5F, NBT_RESISTANCE, 1.0F, NBT_COLOR, 0xffdd00, NBT_INPUT_MIN, 1, NBT_INPUT, V[7], NBT_INPUT_MAX, VMAX[7], NBT_CAPACITY, 2000000000000L, NBT_ENERGY_ACCEPTED, TD.Energy.QU)), null, "gt:zpm");
		if (COMPAT_TC != null) COMPAT_TC.registerThaumcraftAspectsToItem(IL.ZPM.get(1), F, TC.stack(TC.ALIENIS, 10), TC.stack(TC.MACHINA, 10), TC.stack(TC.VACUOS, 10), TC.stack(TC.POTENTIA, 10), TC.stack(TC.LUX, 10), TC.stack(TC.LUCRUM, 10));

		// Auto-Tools
		aClass = MultiTileEntityAutoToolHammer.class;

		aMat = MT.DATA.Heat_T[0];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15001, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[0], NBT_RESISTANCE, HARDNESS[0], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_QUALITY, 1, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[1];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15002, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[1], NBT_RESISTANCE, HARDNESS[1], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_QUALITY, 2, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15003, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[2], NBT_RESISTANCE, HARDNESS[2], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_QUALITY, 3, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15004, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[3], NBT_RESISTANCE, HARDNESS[3], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[3], NBT_QUALITY, 4, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[4];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15005, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[4], NBT_RESISTANCE, HARDNESS[4], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[4], NBT_QUALITY, 5, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[5];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15006, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[5], NBT_RESISTANCE, HARDNESS[5], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[5], NBT_QUALITY, 6, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[6];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15007, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[6], NBT_RESISTANCE, HARDNESS[6], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_QUALITY, 7, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[7];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15008, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[7], NBT_RESISTANCE, HARDNESS[7], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_QUALITY, 8, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[8];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15009, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[8], NBT_RESISTANCE, HARDNESS[8], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_QUALITY, 9, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[9];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15010, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[9], NBT_RESISTANCE, HARDNESS[9], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[9], NBT_QUALITY, 10, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[10];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15011, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[10], NBT_RESISTANCE, HARDNESS[10], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_QUALITY, 11, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[11];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15012, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[11], NBT_RESISTANCE, HARDNESS[11], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_QUALITY, 12, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[12];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15013, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[12], NBT_RESISTANCE, HARDNESS[12], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_QUALITY, 13, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[13];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15014, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[13], NBT_RESISTANCE, HARDNESS[13], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_QUALITY, 14, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[14];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15015, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[14], NBT_RESISTANCE, HARDNESS[14], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_QUALITY, 15, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));
		aMat = MT.DATA.Heat_T[15];    aRegistry.add("Automatic Hammer (" + aMat.getLocal() + ")"          , "Automatic Tools"                     , 15016, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[15], NBT_RESISTANCE, HARDNESS[15], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_QUALITY, 16, NBT_ENERGY_ACCEPTED, TD.Energy.KU), "wR", "MS", "hH", 'M', OP.casingMachineDouble.dat(aMat), 'H', OP.toolHeadHammer.dat(aMat), 'R', OP.stickLong.dat(aMat), 'S', OP.spring.dat(aMat));


		aClass = MultiTileEntityAutoToolIgniter.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Automatic Igniter ("+VN[0]+")"                       , "Automatic Tools"                     , 15021, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[0], NBT_QUALITY, 0, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[0]);
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Automatic Igniter ("+VN[1]+")"                       , "Automatic Tools"                     , 15022, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[1], NBT_QUALITY, 1, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[1]);
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Automatic Igniter ("+VN[2]+")"                       , "Automatic Tools"                     , 15023, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[2], NBT_QUALITY, 2, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[2]);
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Automatic Igniter ("+VN[3]+")"                       , "Automatic Tools"                     , 15024, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[3], NBT_QUALITY, 3, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[3]);
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Automatic Igniter ("+VN[4]+")"                       , "Automatic Tools"                     , 15025, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[4], NBT_QUALITY, 4, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[4]);
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Automatic Igniter ("+VN[5]+")"                       , "Automatic Tools"                     , 15026, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[5], NBT_QUALITY, 5, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[5]);
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Automatic Igniter ("+VN[6]+")"                       , "Automatic Tools"                     , 15027, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[6], NBT_QUALITY, 6, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[6]);
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Automatic Igniter ("+VN[7]+")"                       , "Automatic Tools"                     , 15028, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[7], NBT_QUALITY, 7, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[7]);
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Automatic Igniter ("+VN[8]+")"                       , "Automatic Tools"                     , 15029, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[8], NBT_QUALITY, 8, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[8]);
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Automatic Igniter ("+VN[9]+")"                       , "Automatic Tools"                     , 15030, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[9], NBT_QUALITY, 9, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[9]);
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Automatic Igniter ("+VN[10]+")"                       , "Automatic Tools"                     , 15031, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[10], NBT_QUALITY, 10, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[10]);
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Automatic Igniter ("+VN[11]+")"                       , "Automatic Tools"                     , 15032, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[11], NBT_QUALITY, 11, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[11]);
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Automatic Igniter ("+VN[12]+")"                       , "Automatic Tools"                     , 15033, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[12], NBT_QUALITY, 12, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[12]);
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Automatic Igniter ("+VN[13]+")"                       , "Automatic Tools"                     , 15034, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[13], NBT_QUALITY, 13, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[13]);
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Automatic Igniter ("+VN[14]+")"                       , "Automatic Tools"                     , 15035, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[14], NBT_QUALITY, 14, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[14]);
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Automatic Igniter ("+VN[15]+")"                       , "Automatic Tools"                     , 15036, 15002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  V[15], NBT_QUALITY, 15, NBT_ENERGY_ACCEPTED, TD.Energy.EU), "BwB", "CMC", 'M', OP.casingMachine.dat(aMat), 'B', OP.bolt.dat(ANY.Steel), 'C', MT.DATA.CABLES_01[15]);


		// Pumps
		aClass = MultiTileEntityPump.class;
		aMat = MT.DATA.Heat_T[0];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15041, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[0], NBT_RESISTANCE, HARDNESS[0], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[0], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[1];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15042, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[1], NBT_RESISTANCE, HARDNESS[1], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[1], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[2];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15043, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[2], NBT_RESISTANCE, HARDNESS[2], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[2], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeMedium.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[3];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15044, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[3], NBT_RESISTANCE, HARDNESS[3], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[3], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeLarge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[4];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15045, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[4], NBT_RESISTANCE, HARDNESS[4], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[4], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeHuge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[5];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15046, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[5], NBT_RESISTANCE, HARDNESS[5], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[5], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[6];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15047, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[6], NBT_RESISTANCE, HARDNESS[6], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[6], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[7];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15048, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[7], NBT_RESISTANCE, HARDNESS[7], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[7], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeMedium.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[8];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15049, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[8], NBT_RESISTANCE, HARDNESS[8], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[8], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeLarge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[9];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15050, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[9], NBT_RESISTANCE, HARDNESS[9], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[9], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeHuge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[10];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15051, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[10], NBT_RESISTANCE, HARDNESS[10], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[10], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[11];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15052, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[11], NBT_RESISTANCE, HARDNESS[11], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[11], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[12];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15053, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[12], NBT_RESISTANCE, HARDNESS[12], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[12], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeMedium.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[13];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15054, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[13], NBT_RESISTANCE, HARDNESS[13], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[13], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeLarge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[14];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15055, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[14], NBT_RESISTANCE, HARDNESS[14], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[14], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeHuge.dat(MT.StainlessSteel));
		aMat = MT.DATA.Heat_T[15];    aRegistry.add("Rotational Pump (" + aMat.getLocal() + ")"           , "Pumps"                               , 15056, 16002, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, HARDNESS[15], NBT_RESISTANCE, HARDNESS[15], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, V[15], NBT_ENERGY_ACCEPTED, TD.Energy.RU), "GwG", "PMP", "RPR", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'R', OP.rotor.dat(MT.StainlessSteel), 'P', OP.pipeSmall.dat(MT.StainlessSteel));

		//Light Collection Device
		aClass = MultiTileEntityLightCollectionDevice.class;
		aMat = MT.DATA.Electric_T[0];   aRegistry.add("Light Collection Device ("+VN[0]+")"                                         , "Solar Panels"                        , 15061, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[0], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[0], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[1];   aRegistry.add("Light Collection Device ("+VN[1]+")"                                         , "Solar Panels"                        , 15062, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[1], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[1], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[2];   aRegistry.add("Light Collection Device ("+VN[2]+")"                                         , "Solar Panels"                        , 15063, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[2], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[2], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[3];   aRegistry.add("Light Collection Device ("+VN[3]+")"                                         , "Solar Panels"                        , 15064, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[3], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[3], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[4];   aRegistry.add("Light Collection Device ("+VN[4]+")"                                         , "Solar Panels"                        , 15065, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[4], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[4], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[5];   aRegistry.add("Light Collection Device ("+VN[5]+")"                                         , "Solar Panels"                        , 15066, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[5], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[5], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[6];   aRegistry.add("Light Collection Device ("+VN[6]+")"                                         , "Solar Panels"                        , 15067, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[6], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[6], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[7];   aRegistry.add("Light Collection Device ("+VN[7]+")"                                         , "Solar Panels"                        , 15068, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[7], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[7], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[8];   aRegistry.add("Light Collection Device ("+VN[8]+")"                                         , "Solar Panels"                        , 15069, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[8], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[8], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[9];   aRegistry.add("Light Collection Device ("+VN[9]+")"                                         , "Solar Panels"                        , 15070, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[9], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[9], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[10];   aRegistry.add("Light Collection Device ("+VN[10]+")"                                         , "Solar Panels"                        , 15071, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[10], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[10], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[11];   aRegistry.add("Light Collection Device ("+VN[11]+")"                                         , "Solar Panels"                        , 15072, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[11], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[11], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[12];   aRegistry.add("Light Collection Device ("+VN[12]+")"                                         , "Solar Panels"                        , 15073, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[12], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[12], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[13];   aRegistry.add("Light Collection Device ("+VN[13]+")"                                         , "Solar Panels"                        , 15074, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[13], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[13], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[14];   aRegistry.add("Light Collection Device ("+VN[14]+")"                                         , "Solar Panels"                        , 15075, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[14], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[14], 'S', OP.plateGem.dat(ANY.Si));
		aMat = MT.DATA.Electric_T[15];   aRegistry.add("Light Collection Device ("+VN[15]+")"                                         , "Solar Panels"                        , 15076, 10050, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_OUTPUT, V[15], NBT_ENERGY_EMITTED, TD.Energy.LX), "SWS", "CMC", "SWS", 'M', OP.casingMachine.dat(aMat), 'W', OP.cableGt01.dat(ANY.Cu), 'C', OD_CIRCUITS[15], 'S', OP.plateGem.dat(ANY.Si));
	}

	private static void computer(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		aMat = MT.SteelGalvanized;      aRegistry.add("USB Switch"                                          , "Computing", 19000, 19000, MultiTileEntityUSBSwitch.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 6.0F, NBT_RESISTANCE, 6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid)), "UPU", "TMT", "UdU", 'M', OP.casingMachine.dat(aMat), 'T', OP.screw.dat(aMat), 'U', IL.USB_Cable_3, 'P', IL.Processor_Crystal_Emerald);
		aMat = MT.SteelGalvanized;      aRegistry.add("HDD Switch"                                          , "Computing", 19001, 19000, MultiTileEntityHDDSwitch.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 6.0F, NBT_RESISTANCE, 6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid)), "CPC", "TMT", "UdU", 'M', OP.casingMachine.dat(aMat), 'T', OP.screw.dat(aMat), 'U', IL.USB_Cable_3, 'P', IL.Processor_Crystal_Emerald, 'C', OD_CIRCUITS[3]);
	}

	private static void multiblocks(MultiTileEntityRegistry aRegistry, MultiTileEntityBlock aMetal, MultiTileEntityBlock aMetalChips, MultiTileEntityBlock aMetalWires, MultiTileEntityBlock aMachine, MultiTileEntityBlock aWooden, MultiTileEntityBlock aBush, MultiTileEntityBlock aStone, MultiTileEntityBlock aWool, MultiTileEntityBlock aTNT, MultiTileEntityBlock aHive, MultiTileEntityBlock aUtilMetal, MultiTileEntityBlock aUtilStone, MultiTileEntityBlock aUtilWood, MultiTileEntityBlock aUtilWool, OreDictMaterial aMat, Class<? extends TileEntity> aClass) {
		aClass = MultiTileEntityMultiBlockPart.class;
		aMat = MT.Ceramic;              aRegistry.add("Fire Bricks"                                         , "Multiblock Machines", 18000, 17101, aClass                                   , aMat.mToolQuality, 64, aStone     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "firebricks"              , NBT_DESIGNS, 0), "CBC", "BWB", "CBC", 'B', Items.brick, 'C', OP.dust.dat(ANY.Clay), 'W', OD.container1000water);
		aMat = MT.WoodSealed;           aRegistry.add("Wood Wall"                                           , "Multiblock Machines", 18001, 17101, aClass                                   , aMat.mToolQuality, 64, aWooden    , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "woodwall"                , NBT_DESIGNS, 0), "WsW", "PhP", "WrW", 'W', OP.plate.dat(aMat), 'P', OP.plate.dat(ANY.Iron));
		// 18020
		// 18021
		/*
		aMat = MT.Pb;                   aRegistry.add("Lead Wall"                                           , "Multiblock Machines", 18011, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Bronze;               aRegistry.add("Bronze Wall"                                         , "Multiblock Machines", 18010, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.Steel;               aRegistry.add("Steel Wall"                                          , "Multiblock Machines", 18009, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.SteelGalvanized;      aRegistry.add("Galvanized Steel Wall"                               , "Multiblock Machines", 18008, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Wall"                                , "Multiblock Machines", 18002, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Invar;                aRegistry.add("Invar Wall"                                          , "Multiblock Machines", 18007, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ti;                   aRegistry.add("Titanium Wall"                                       , "Multiblock Machines", 18006, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Wall"                                  , "Multiblock Machines", 18003, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.W;                   aRegistry.add("Tungsten Wall"                                       , "Multiblock Machines", 18004, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ta4HfC5;              aRegistry.add("Tantalum Hafnium Carbide Wall"                       , "Multiblock Machines", 18012, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ad;                   aRegistry.add("Adamantium Wall"                                     , "Multiblock Machines", 18005, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

		aMat = MT.Pb;                   aRegistry.add("Dense Lead Wall"                                     , "Multiblock Machines", 18031, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Bronze;               aRegistry.add("Dense Bronze Wall"                                   , "Multiblock Machines", 18030, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.Steel;               aRegistry.add("Dense Steel Wall"                                    , "Multiblock Machines", 18029, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.SteelGalvanized;      aRegistry.add("Dense Galvanized Steel Wall"                         , "Multiblock Machines", 18028, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.StainlessSteel;       aRegistry.add("Dense Stainless Steel Wall"                          , "Multiblock Machines", 18022, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Invar;                aRegistry.add("Dense Invar Wall"                                    , "Multiblock Machines", 18027, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ti;                   aRegistry.add("Dense Titanium Wall"                                 , "Multiblock Machines", 18026, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Tungstensteel Wall"                            , "Multiblock Machines", 18023, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.W;                   aRegistry.add("Dense Tungsten Wall"                                 , "Multiblock Machines", 18024, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Tantalum Hafnium Carbide Wall"                 , "Multiblock Machines", 18032, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ad;                   aRegistry.add("Dense Adamantium Wall"                               , "Multiblock Machines", 18025, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

		aMat = MT.AnnealedCopper;       aRegistry.add("Large Copper Coil"                                   , "Multiblock Machines", 18040, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Large Niobium-Titanium Coil"                         , "Multiblock Machines", 18041, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Nichrome;             aRegistry.add("Large Nichrome Coil"                                 , "Multiblock Machines", 18042, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.SiC;                  aRegistry.add("Large Carborundum Coil"                              , "Multiblock Machines", 18043, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Os;                   aRegistry.add("Large Osmium Coil"                                   , "Multiblock Machines", 18044, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Ir;                   aRegistry.add("Large Iridium Coil"                                  , "Multiblock Machines", 18045, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Nq;                   aRegistry.add("Large Naquadah Coil"                                  , "Multiblock Machines", 18046, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		*/

		/*
		 * Heat_T[]                    =
		 * {ANY.Stone    ,18010
		 *  Invar,
		 *  SteelGalvanized     ,
		 *   Ti                ,
		 *    HSSG   ,
		 *     RhodiumPlatedPalladium         18015        ,
		 *      Ir                ,
		 *       Os       ,
		 *       HSSS,
		 *        Neutronium    ,
		 *         Bedrockium        ,18020
		 *          BlackPlutonium        ,
		 *           Draconium, CrystalMatrix     ,
		 *            CosmicNeutronium        ,
		 *             Infinity             },
		 */


		for(int i=0;i<MT.DATA.Heat_T.length;i++) {
			aMat = MT.DATA.Heat_T[i];
			aRegistry.add( aMat.getLocal() + " Wall"                                           , "Multiblock Machines", 18010+i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
			aRegistry.add("Dense " + aMat.getLocal() + " Wall"                                     , "Multiblock Machines", 18040+i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
			aRegistry.add("Large " + aMat.getLocal() + " Coil"                                   , "Multiblock Machines", 18070+i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));

		}
		aMat = MT.Pb;                   aRegistry.add("Lead Wall"                                           , "Multiblock Machines", 18032, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Bronze;               aRegistry.add("Bronze Wall"                                         , "Multiblock Machines", 18033, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.Steel;               aRegistry.add("Steel Wall"                                          , "Multiblock Machines", 18034, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Wall"                                , "Multiblock Machines", 18035, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Wall"                                  , "Multiblock Machines", 18036, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.W;                   aRegistry.add("Tungsten Wall"                                       , "Multiblock Machines", 18037, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ta4HfC5;              aRegistry.add("Tantalum Hafnium Carbide Wall"                       , "Multiblock Machines", 18038, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ad;                   aRegistry.add("Adamantium Wall"                                     , "Multiblock Machines", 18039, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwall"               , NBT_DESIGNS, 7), "wPP", "hPP"       , 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

		aMat = MT.Pb;                   aRegistry.add("Dense Lead Wall"                                     , "Multiblock Machines", 18062, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Bronze;               aRegistry.add("Dense Bronze Wall"                                   , "Multiblock Machines", 18063, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.Steel;               aRegistry.add("Dense Steel Wall"                                    , "Multiblock Machines", 18064, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.StainlessSteel;       aRegistry.add("Dense Stainless Steel Wall"                          , "Multiblock Machines", 18065, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.TungstenSteel;        aRegistry.add("Dense Tungstensteel Wall"                            , "Multiblock Machines", 18066, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = ANY.W;                   aRegistry.add("Dense Tungsten Wall"                                 , "Multiblock Machines", 18067, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ta4HfC5;              aRegistry.add("Dense Tantalum Hafnium Carbide Wall"                 , "Multiblock Machines", 18068, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());
		aMat = MT.Ad;                   aRegistry.add("Dense Adamantium Wall"                               , "Multiblock Machines", 18069, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(10), aRegistry.getItem());

		aMat = MT.AnnealedCopper;       aRegistry.add("Large Copper Coil"                                   , "Multiblock Machines", 18095, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.NiobiumTitanium;      aRegistry.add("Large Niobium-Titanium Coil"                         , "Multiblock Machines", 18096, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Nichrome;             aRegistry.add("Large Nichrome Coil"                                 , "Multiblock Machines", 18097, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.SiC;                  aRegistry.add("Large Carborundum Coil"                              , "Multiblock Machines", 18098, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));
		aMat = MT.Nq;                   aRegistry.add("Large Naquadah Coil"                                  , "Multiblock Machines", 18099, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "coil"                    , NBT_DESIGNS, 1), "WWW", "WxW", "WWW", 'W', OP.wireGt04.dat(aMat));

		aMat = MT.StainlessSteel;       aRegistry.add("Cracking Tower Part"                             , "Multiblock Machines", 18109, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtowerparts"  , NBT_DESIGNS, 1), "TMT", "hPd", "TMT", 'M', OP.plate.dat(aMat), 'P', OP.pipeSmall.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Centrifuge Part"                                     , "Multiblock Machines", 18100, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "centrifugeparts"         , NBT_DESIGNS, 8), "TwT", "GMG", "TdT", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.StainlessSteel;       aRegistry.add("Electrolyzer Part"                                   , "Multiblock Machines", 18105, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "electrolyzerparts"       , NBT_DESIGNS, 7), "WwW", "WMW", "CCC", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.Pt), 'C', OD_CIRCUITS[6]);
		aMat = MT.Invar;                aRegistry.add("Heat Transmitter"                                    , "Multiblock Machines", 18101, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "heatacceptor"            , NBT_DESIGNS, 0), "MPM", "hRw", "MPM", 'M', OP.plate.dat(aMat), 'P', OP.plateTriple.dat(ANY.Cu), 'R', OP.stickLong.dat(ANY.Cu));
		aMat = MT.StainlessSteel;       aRegistry.add("Distillation Tower Part"                             , "Multiblock Machines", 18102, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtowerparts"  , NBT_DESIGNS, 1), "TMT", "hPd", "TMT", 'M', OP.plate.dat(aMat), 'P', OP.pipeSmall.dat(aMat), 'T', OP.screw.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Bedrock Mining Drill Head"                           , "Multiblock Machines", 18103, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "bedrockdrill"            , NBT_DESIGNS, 0), "DID", "GMG", "DID", 'M', OP.casingMachineDense.dat(aMat), 'G', OP.gearGt.dat(aMat), 'I', OP.toolHeadDrill.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
		aMat = MT.SteelGalvanized;      aRegistry.add("Lightning Rod"                                       , "Multiblock Machines", 18104, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   8.0F, NBT_RESISTANCE,   8.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "lightningrod"            , NBT_DESIGNS, 0), "MWM", "WRW", "MWM", 'M', OP.plate.dat(aMat), 'R', OP.stick.dat(MT.Ir), 'W', OP.wireGt01.dat(MT.NiobiumTitanium));
		aMat = MT.Ti;                   aRegistry.add("Sluice Part"                                         , "Multiblock Machines", 18106, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "sluiceparts"             , NBT_DESIGNS, 7), "GGG", "PMP", "PwP", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.pipeMedium.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Crusher Wheels"                                      , "Multiblock Machines", 18107, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crusherwheels"           , NBT_DESIGNS, 3), "DDD", "GDG", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.gem.dat(ANY.Diamond));
		aMat = MT.TungstenSteel;        aRegistry.add("Shredder Blades"                                     , "Multiblock Machines", 18108, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "shredderblades"          , NBT_DESIGNS, 3), "DGD", "GwG", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat), 'D', OP.plateGem.dat(ANY.Diamond));
		aMat = ANY.W;       aRegistry.add("Crystallisation Room Part"                                   , "Multiblock Machines", 18110, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "electrolyzerparts"       , NBT_DESIGNS, 7), "WwW", "WMW", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(ANY.W));
		aMat = ANY.W;        aRegistry.add("Extruder Part"                                      , "Multiblock Machines", 18111, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crusherwheels"           , NBT_DESIGNS, 3), "GwG", "GMG", 'M', OP.casingMachineDouble.dat(aMat), 'G', OP.gearGt.dat(aMat));
		aMat = MT.TungstenSteel;          aRegistry.add("Compressor Part"                                         , "Multiblock Machines", 18112, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "sluiceparts"             , NBT_DESIGNS, 7), "GGG", "PMP", "MwM", 'M', OP.casingMachine.dat(aMat), 'G', OP.gearGt.dat(aMat), 'P', OP.pipeMedium.dat(aMat));
		aMat = MT.Ir;                     aRegistry.add("Circuit Assembling Machine Part"                                         , "Multiblock Machines", 18113, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "sluiceparts"             , NBT_DESIGNS, 7),  "WwW", "WMW", "CCC", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt01.dat(MT.Pt), 'C', OD_CIRCUITS[6]);


		aMat = MT.SteelGalvanized;      aRegistry.add("Ventilation Unit"                                    , "Multiblock Machines", 18299, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "ventilationunit"         , NBT_DESIGNS, 0), "FwF", "CMC", "EdE", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[3], 'F', IL.Cover_Vent, 'E', IL.MOTORS[1]);
		aMat = MT.SteelGalvanized;      aRegistry.add("Versatile Quadcore Processor Unit"                   , "Multiblock Machines", 18200, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "processorversatile"      , NBT_DESIGNS, 0), "DCS", "CMC", "RCE", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'S', IL.Processor_Crystal_Sapphire, 'D', IL.Processor_Crystal_Diamond, 'R', IL.Processor_Crystal_Ruby, 'E', IL.Processor_Crystal_Emerald);
		aMat = MT.SteelGalvanized;      aRegistry.add("Logic Quadcore Processor Unit"                       , "Multiblock Machines", 18201, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "processorlogic"          , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Diamond );
		aMat = MT.SteelGalvanized;      aRegistry.add("Control Quadcore Processor Unit"                     , "Multiblock Machines", 18202, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "processorcontrol"        , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Ruby    );
		aMat = MT.SteelGalvanized;      aRegistry.add("Storage Quadcore Processor Unit"                     , "Multiblock Machines", 18203, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "processorstorage"        , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Emerald );
		aMat = MT.SteelGalvanized;      aRegistry.add("Conversion Quadcore Processor Unit"                  , "Multiblock Machines", 18204, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "processorconversion"     , NBT_DESIGNS, 0), "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Sapphire);

		aMat = MT.Ceramic;              aRegistry.add("Coke Oven"                                           , "Multiblock Machines", 17000, 17101, MultiTileEntityCokeOven.class            , aMat.mToolQuality, 16, aStone     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "cokeoven"                , NBT_INPUT,    1, NBT_PARALLEL, 16, NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_NO_CONSTANT_POWER, T, NBT_RECIPEMAP, RM.CokeOven, NBT_INV_SIDE_IN, SBIT_U, NBT_INV_SIDE_OUT, SBIT_D, NBT_TANK_SIDE_OUT, 61, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, 63, NBT_NEEDS_IGNITION, T), "hRT", "PMR", "dRT", 'M', aRegistry.getItem(18000), 'R', OP.stick.dat(ANY.Iron), 'P', OP.plate.dat(ANY.Iron), 'T', OP.screw.dat(ANY.Iron));
		scanItem(17000);

		aMat = MT.WoodSealed;           aRegistry.add("Wood Tank Main Valve"                                , "Multiblock Machines", 17001, 17101, MultiTileEntityTank3x3x3Wood.class       , aMat.mToolQuality, 16, aWooden    , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   5.0F, NBT_RESISTANCE,   5.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankwood"                , NBT_TANK_CAPACITY,     432000, NBT_DESIGN, 18001, NBT_GASPROOF, F, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F, NBT_FLAMMABILITY,  150), " R ", "rMs", " R ", 'M', aRegistry.getItem(18001), 'R', OP.ring.dat(ANY.Iron));
		aMat = MT.StainlessSteel;       aRegistry.add("Small Stainless Steel Tank Main Valve"               , "Multiblock Machines", 17002, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    1728000, NBT_DESIGN, 18002, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18002), 'R', OP.ring.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Small Invar Tank Main Valve"                         , "Multiblock Machines", 17007, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    1728000, NBT_DESIGN, 18007, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18007), 'R', OP.ring.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Small Titanium Tank Main Valve"                      , "Multiblock Machines", 17006, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    3456000, NBT_DESIGN, 18006, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18006), 'R', OP.ring.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Small Tungstensteel Tank Main Valve"                 , "Multiblock Machines", 17003, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18003, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18003), 'R', OP.ring.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Small Tungsten Tank Main Valve"                      , "Multiblock Machines", 17004, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18004, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18004), 'R', OP.ring.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Small Adamantium Tank Main Valve"                    , "Multiblock Machines", 17005, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  110592000, NBT_DESIGN, 18005, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18005), 'R', OP.ring.dat(aMat));

		aMat = MT.StainlessSteel;       aRegistry.add("Small Dense Stainless Steel Tank Main Valve"         , "Multiblock Machines", 17022, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18022, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18022), 'R', OP.ring.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Small Dense Invar Tank Main Valve"                   , "Multiblock Machines", 17027, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000, NBT_DESIGN, 18027, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18027), 'R', OP.ring.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Small Dense Titanium Tank Main Valve"                , "Multiblock Machines", 17026, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   13824000, NBT_DESIGN, 18026, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18026), 'R', OP.ring.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Small Dense Tungstensteel Tank Main Valve"           , "Multiblock Machines", 17023, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   27648000, NBT_DESIGN, 18023, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18023), 'R', OP.ring.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Small Dense Tungsten Tank Main Valve"                , "Multiblock Machines", 17024, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   27648000, NBT_DESIGN, 18024, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18024), 'R', OP.ring.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Small Dense Adamantium Tank Main Valve"              , "Multiblock Machines", 17025, 17101, MultiTileEntityTank3x3x3Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  442368000, NBT_DESIGN, 18025, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), " R ", "hMs", " R ", 'M', aRegistry.getItem(18025), 'R', OP.ring.dat(aMat));

		aMat = MT.StainlessSteel;       aRegistry.add("Large Stainless Steel Tank Main Valve"               , "Multiblock Machines", 17042, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    8000000, NBT_DESIGN, 18002, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17002), 'P', OP.plate.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Large Invar Tank Main Valve"                         , "Multiblock Machines", 17047, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    8000000, NBT_DESIGN, 18007, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17007), 'P', OP.plate.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Large Titanium Tank Main Valve"                      , "Multiblock Machines", 17046, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   16000000, NBT_DESIGN, 18006, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17006), 'P', OP.plate.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Large Tungstensteel Tank Main Valve"                 , "Multiblock Machines", 17043, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18003, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17003), 'P', OP.plate.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Large Tungsten Tank Main Valve"                      , "Multiblock Machines", 17044, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18004, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17004), 'P', OP.plate.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Large Adamantium Tank Main Valve"                    , "Multiblock Machines", 17045, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  512000000, NBT_DESIGN, 18005, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17005), 'P', OP.plate.dat(aMat));

		aMat = MT.StainlessSteel;       aRegistry.add("Large Dense Stainless Steel Tank Main Valve"         , "Multiblock Machines", 17062, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18022, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17022), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Large Dense Invar Tank Main Valve"                   , "Multiblock Machines", 17067, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   32000000, NBT_DESIGN, 18027, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17027), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Large Dense Titanium Tank Main Valve"                , "Multiblock Machines", 17066, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,   64000000, NBT_DESIGN, 18026, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17026), 'P', OP.plateDense.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Large Dense Tungstensteel Tank Main Valve"           , "Multiblock Machines", 17063, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  128000000, NBT_DESIGN, 18023, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17023), 'P', OP.plateDense.dat(aMat));
		aMat = ANY.W;                   aRegistry.add("Large Dense Tungsten Tank Main Valve"                , "Multiblock Machines", 17064, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,  128000000, NBT_DESIGN, 18024, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17024), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Large Dense Adamantium Tank Main Valve"              , "Multiblock Machines", 17065, 17101, MultiTileEntityTank5x5x5Metal.class      , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY, 2048000000, NBT_DESIGN, 18025, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, T                        ), "PPP", "hMs", "PPP", 'M', aRegistry.getItem(17025), 'P', OP.plateDense.dat(aMat));


		aMat = MT.StainlessSteel;       aRegistry.add("Cracking Tower"                                  , "Multiblock Machines", 17099, 17101, MultiTileEntityCrackingTower.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crackingtower"       , NBT_INPUT,  V[2], NBT_INPUT_MIN,   V[2], NBT_INPUT_MAX,     V[12]                       , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.CrackingTower    , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T                                                                       ), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat));
		scanItem(17099);
		aMat = MT.StainlessSteel;       aRegistry.add("Distillation Tower"                                  , "Multiblock Machines", 17101, 17101, MultiTileEntityDistillationTower.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtower"       , NBT_INPUT,  V[2], NBT_INPUT_MIN,   V[2], NBT_INPUT_MAX,     V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.DistillationTower    , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T                                                                       ), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat));
		scanItem(17101);
		aMat = MT.StainlessSteel;       aRegistry.add("Cryo Distillation Tower"                             , "Multiblock Machines", 17111, 17101, MultiTileEntityCryoDistillationTower.class,aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "cryodistillationtower"   , NBT_INPUT,  V[2], NBT_INPUT_MIN,   V[2], NBT_INPUT_MAX,     V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.CU, NBT_RECIPEMAP, RM.CryoDistillationTower, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T                                                                       ), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(ANY.Cu));
		scanItem(17111);
		aMat = MT.TungstenSteel;        aRegistry.add("Implosion Compressor"                                , "Multiblock Machines", 17110, 17101, MultiTileEntityImplosionCompressor.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "implosioncompressor"     , NBT_INPUT,  V[2]                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.ImplosionCompressor  , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CPC", "PAP", "RMR", 'M', aRegistry.getItem(18023), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'A', IL.ROBOT_ARMS[2]);
		scanItem(17110);
		aMat = MT.TungstenSteel;        aRegistry.add("Large Centrifuge"                                    , "Multiblock Machines", 17100, 17101, MultiTileEntityCentrifuge.class          , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largecentrifuge"         , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Centrifuge           , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  16, NBT_PARALLEL_DURATION, T                          ), "CMC", "RCR"       , 'M', aRegistry.getItem(18100), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6]);
		scanItem(17100);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Electrolyzer"                                  , "Multiblock Machines", 17103, 17101, MultiTileEntityElectrolyzer.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeelectrolyzer"       , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Electrolyzer         , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  16, NBT_PARALLEL_DURATION, T                          ), "CMC", "RCR"       , 'M', aRegistry.getItem(18105), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6]);
		scanItem(17103);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Coagulator Array"                              , "Multiblock Machines", 17105, 17101, MultiTileEntityCoagulator.class          , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largecoagulator"         , NBT_INPUT,  V[2]                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Coagulator           , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "PPP", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(17105);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Autoclave"                                     , "Multiblock Machines", 17112, 17101, MultiTileEntityAutoclave.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeautoclave"          , NBT_INPUT,  V[2]                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Autoclave            , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  16                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "PPP", 'M', aRegistry.getItem(18022), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(17112);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Bathing Vat"                                   , "Multiblock Machines", 17104, 17101, MultiTileEntityBath.class                , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largebath"               , NBT_INPUT,  V[2]                                                                     , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Bath                 , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "APA", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'A', IL.ROBOT_ARMS[2]);
		scanItem(17104);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Batch Mixer"                                   , "Multiblock Machines", 17102, 17101, MultiTileEntityMixer.class               , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largemixer"              , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Mixer                , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, T                          ), "PSP", "PSP", "RMC", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat), 'S', OP.stickLong.dat(aMat));
		scanItem(17102);
		aMat = MT.StainlessSteel;       aRegistry.add("Large Fermenter"                                     , "Multiblock Machines", 17113, 17101, MultiTileEntityFermenter.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largefermenter"          , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, RM.Fermenter            , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, T                          ), "PPP", "CRC", "PMP", 'M', aRegistry.getItem(18002), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(17113);
		aMat = MT.Invar;                aRegistry.add("Large Electric Oven"                                 , "Multiblock Machines", 17106, 17101, MultiTileEntityOven.class                , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeoven"               , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  2500, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Furnace              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T                          ), "PPP", "PwP", "RMC", 'M', aRegistry.getItem(18007), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(17106);
		aMat = MT.Ti;                   aRegistry.add("Large Sluice"                                        , "Multiblock Machines", 17107, 17101, MultiTileEntitySluice.class              , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largesluice"             , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Sluice               , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T                          ), "GGG", "SwS", "RMC", 'M', aRegistry.getItem(18006), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.stick.dat(aMat));
		scanItem(17107);
		aMat = MT.TungstenSteel;        aRegistry.add("Large Crusher"                                       , "Multiblock Machines", 17108, 17101, MultiTileEntityCrusher.class             , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largecrusher"            , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Crusher              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "GSG", "SGS", "RMC", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
		scanItem(17108);
		aMat = MT.TungstenSteel;        aRegistry.add("Large Shredder"                                      , "Multiblock Machines", 17109, 17101, MultiTileEntityShredder.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeshredder"           , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Shredder             , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "SGS", "GSG", "RMC", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
		scanItem(17109);
		aMat = ANY.Steel;               aRegistry.add("Large Squeezer"                                      , "Multiblock Machines", 17114, 17101, MultiTileEntitySqueezer.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largesqueezer"           , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_RECIPEMAP, RM.Squeezer             , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "GSG", "GSG", "RMC", 'M', aRegistry.getItem(18009), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
		scanItem(17114);
		aMat = MT.Pb;                   aRegistry.add("Large Matter Fabricator"                             , "Multiblock Machines", 17199, 17101, MultiTileEntityMatterFabricator.class    , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largemassfab"            , NBT_INPUT,    V[2], NBT_INPUT_MIN,    V[2], NBT_INPUT_MAX,  V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.QU, NBT_RECIPEMAP, RM.Massfab              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "FFF", "FMF", "FFF", 'M', aRegistry.getItem(18031), 'F', IL.FIELD_GENERATORS[5]);
		scanItem(17199);
		aMat = MT.SteelGalvanized;      aRegistry.add("Fusion Reactor"                                      , "Multiblock Machines", 17198, 17101, MultiTileEntityFusionReactor.class       , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "fusionreactor"           , NBT_INPUT, V[2], NBT_INPUT_MIN,    V[2], NBT_INPUT_MAX,    V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Fusion               , NBT_ENERGY_ACCEPTED_2, TD.Energy.LU, NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_SPECIAL_IS_START_ENERGY, T, NBT_NO_CONSTANT_POWER, T), "FFF", "FMF", "FFF", 'M', aRegistry.getItem(18003), 'F', IL.FIELD_GENERATORS[5]);
		scanItem(17198);
		aMat = ANY.W;                   aRegistry.add("Large Heat Exchanger"                                , "Multiblock Machines", 17197, 17101, MultiTileEntityLargeHeatExchanger.class  , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeheatexchanger"      , NBT_OUTPUT, V[2], NBT_FUELMAP, FM.Hot, NBT_ENERGY_EMITTED, TD.Energy.HU), "DDD", "PMP", "DDD", 'M', aRegistry.getItem(18024), 'D', OP.plateDense.dat(MT.AnnealedCopper), 'P', OP.pipeHuge.dat(ANY.Cu));
		scanItem(17197);

		aMat = MT.StainlessSteel;     aRegistry.add("Electric Coke Oven"                                 , "Multiblock Machines", 18300, 17101, MultiTileEntityElectricCokeOven.class                , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "cokeoven"               , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX, V[15], NBT_EFFICIENCY, 10000   , NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.CokeOven            , NBT_INV_SIDE_IN,     63, NBT_INV_SIDE_OUT,     61, NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_IN,     63, NBT_TANK_SIDE_OUT,     61, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES,     63, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T), "PPP", "PwP", "RMC", 'M', aRegistry.getItem(18004), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(18300);
		aMat = ANY.W;        aRegistry.add("Crystallisation Room"                                       , "Multiblock Machines", 18301, 17101, MultiTileEntityCrystallisationRoom.class             , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeoven"            , NBT_INPUT,  V[2], NBT_INPUT_MIN,  V[2], NBT_INPUT_MAX,     V[15], NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.CrystallisationCrucible              , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL,  64, NBT_PARALLEL_DURATION, T, NBT_NO_CONSTANT_POWER, T), "GSG", "SGS", "RMC", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'G', OP.gearGt.dat(aMat), 'S', OP.gearGtSmall.dat(aMat));
		scanItem(18301);
		aMat = ANY.W;       aRegistry.add("Large Extruder"                                     , "Multiblock Machines", 18302, 17101, MultiTileEntityLargeExtruder.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "cokeoven"          , NBT_INPUT,  V[2], NBT_INPUT_MIN,    V[2], NBT_INPUT_MAX,     V[15]                       , NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Extruder            , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, T                          ), "PPP", "CRC", "PMP", 'M', aRegistry.getItem(18004), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(18302);
		aMat = MT.TungstenSteel;       aRegistry.add("Large Compressor"                                     , "Multiblock Machines", 18303, 17101, MultiTileEntityLargeCompressor.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeoven"          , NBT_INPUT,  V[2], NBT_INPUT_MIN,    V[2], NBT_INPUT_MAX,     V[15]                       , NBT_EFFICIENCY,  5000, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Compressor            , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, T                          ), "PPP", "CRC", "PMP", 'M', aRegistry.getItem(18003), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(aMat));
		scanItem(18303);
		aMat = MT.Ir;       aRegistry.add("Circuit Assembling Machine"                                     , "Multiblock Machines", 18304, 17101, MultiTileEntityLargeCircuit.class           , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeoven"          , NBT_INPUT,  V[2], NBT_INPUT_MIN,    V[2], NBT_INPUT_MAX,     V[15]                       , NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Circuitassembling            , NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T, NBT_PARALLEL, 256, NBT_PARALLEL_DURATION, T                          ),  "PCP", "CMC", "PCP", 'M', OP.casingMachine.dat(aMat), 'C', OD_CIRCUITS[6], 'P', IL.Processor_Crystal_Diamond );
		scanItem(18304);

		/*
		aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Boiler Main Barometer"               , "Multiblock Machines", 17201, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, 18022, NBT_CAPACITY,  40960000, NBT_CAPACITY_SU,  40960000, NBT_OUTPUT_SU,  4096*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(18022), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Invar;                aRegistry.add("Invar Boiler Main Barometer"                         , "Multiblock Machines", 17205, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, 18027, NBT_CAPACITY,  40960000, NBT_CAPACITY_SU,  40960000, NBT_OUTPUT_SU,  4096*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(18027), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Ti;                   aRegistry.add("Titanium Boiler Main Barometer"                      , "Multiblock Machines", 17202, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, 18026, NBT_CAPACITY,  81920000, NBT_CAPACITY_SU,  81920000, NBT_OUTPUT_SU,  8192*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(18026), 'P', OP.plateDense.dat(aMat));
		aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Boiler Main Barometer"                 , "Multiblock Machines", 17203, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, 18023, NBT_CAPACITY, 163840000, NBT_CAPACITY_SU, 163840000, NBT_OUTPUT_SU, 16384*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(18023), 'P', OP.plateDense.dat(aMat));
		aMat = MT.Ad;                   aRegistry.add("Adamantium Boiler Main Barometer"                    , "Multiblock Machines", 17204, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, 18025, NBT_CAPACITY,1310720000, NBT_CAPACITY_SU,1310720000, NBT_OUTPUT_SU,131072*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(18025), 'P', OP.plateDense.dat(aMat));

		aMat = MT.StainlessSteel;       aRegistry.add("Magnalium Steam Turbine Main Housing"                , "Multiblock Machines", 17211, 17101, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 18022, NBT_INPUT,   6144*STEAM_PER_EU, NBT_OUTPUT,   4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18022), 'P', OP.blockPlate.dat(MT.Magnalium));
		aMat = MT.Ti;                   aRegistry.add("Trinitanium Steam Turbine Main Housing"              , "Multiblock Machines", 17212, 17101, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 18026, NBT_INPUT,  12288*STEAM_PER_EU, NBT_OUTPUT,   8192, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18026), 'P', OP.blockPlate.dat(MT.Trinitanium));
		aMat = MT.TungstenSteel;        aRegistry.add("Graphene Steam Turbine Main Housing"                 , "Multiblock Machines", 17213, 17101, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 18023, NBT_INPUT,  24576*STEAM_PER_EU, NBT_OUTPUT,  16384, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18023), 'P', OP.blockPlate.dat(MT.Graphene));
		aMat = MT.Ad;                   aRegistry.add("Vibramantium Steam Turbine Main Housing"             , "Multiblock Machines", 17214, 17101, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 18025, NBT_INPUT, 196608*STEAM_PER_EU, NBT_OUTPUT, 131072, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(18025), 'P', OP.blockPlate.dat(MT.Vibramantium));

		aMat = MT.StainlessSteel;       aRegistry.add("Stainless Steel Dynamo Main Housing"                 , "Multiblock Machines", 17221, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18022, NBT_INPUT,   4096, NBT_OUTPUT,   3072, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18022), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
		aMat = MT.Ti;                   aRegistry.add("Titanium Dynamo Main Housing"                        , "Multiblock Machines", 17222, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18026, NBT_INPUT,   8192, NBT_OUTPUT,   6144, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18026), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
		aMat = MT.TungstenSteel;        aRegistry.add("Tungstensteel Dynamo Main Housing"                   , "Multiblock Machines", 17223, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18023, NBT_INPUT,  16384, NBT_OUTPUT,  12288, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18023), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
		aMat = MT.Ad;                   aRegistry.add("Adamantium Dynamo Main Housing"                      , "Multiblock Machines", 17224, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, 18025, NBT_INPUT, 131072, NBT_OUTPUT,  98304, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(18025), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");

		aMat = MT.StainlessSteel;       aRegistry.add("Magnalium Gas Turbine Main Housing"                  , "Multiblock Machines", 17231, 17101, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 18022, NBT_INPUT,   6144, NBT_OUTPUT,   4096, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', aRegistry.getItem(17211), 'B', "gt:re-battery1", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[1], 'P', OP.plateDense.dat(MT.Invar));
		aMat = MT.Ti;                   aRegistry.add("Trinitanium Gas Turbine Main Housing"                , "Multiblock Machines", 17232, 17101, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 18026, NBT_INPUT,  12288, NBT_OUTPUT,   8192, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', aRegistry.getItem(17212), 'B', "gt:re-battery2", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[2], 'P', OP.plateDense.dat(MT.TungstenSteel));
		aMat = MT.TungstenSteel;        aRegistry.add("Graphene Gas Turbine Main Housing"                   , "Multiblock Machines", 17233, 17101, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 18023, NBT_INPUT,  24576, NBT_OUTPUT,  16384, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', aRegistry.getItem(17213), 'B', "gt:re-battery3", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[3], 'P', OP.plateDense.dat(MT.W));
		aMat = MT.Ad;                   aRegistry.add("Vibramantium Gas Turbine Main Housing"               , "Multiblock Machines", 17234, 17101, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 18025, NBT_INPUT, 196608, NBT_OUTPUT, 131072, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', aRegistry.getItem(17214), 'B', "gt:re-battery4", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[4], 'P', OP.plateDense.dat(MT.Ad));
		*/

		for(int i=0;i<MT.DATA.Heat_T.length;i++) {
			aMat = MT.DATA.Heat_T[i];
			int base = 18040+i;
			aRegistry.add( aMat.getLocal() + " Boiler Main Barometer"               , "Multiblock Machines", 17200+i, 17101, MultiTileEntityLargeBoiler.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeboiler"             , NBT_DESIGN, base, NBT_CAPACITY,  10000*P[i], NBT_CAPACITY_SU,  10000*P[i], NBT_OUTPUT_SU,  P[i]*STEAM_PER_EU), "PPh", "PMP", "wPP", 'M', aRegistry.getItem(base), 'P', OP.plateDense.dat(aMat));
			scanItem(17200+i);
			aRegistry.add( aMat.getLocal() + " Steam Turbine Main Housing"                , "Multiblock Machines", 17230+i, 17101, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, base, NBT_INPUT,   P[i]*STEAM_PER_EU, NBT_OUTPUT,   P[i], NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "PPP", "PMP", "PPP", 'M', aRegistry.getItem(base), 'P', OP.blockPlate.dat(aMat));
			scanItem(17230+i);
			aRegistry.add( aMat.getLocal() + " Dynamo Main Housing"                 , "Multiblock Machines", 17260 + i, 17101, MultiTileEntityLargeDynamo.class         , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "largedynamo"             , NBT_DESIGN, base, NBT_INPUT,   P[i]*STEAM_PER_EU*2, NBT_OUTPUT,   P[i]*2, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.RU, NBT_ENERGY_EMITTED, TD.Energy.EU), "SwS", "CMC", "SBS", 'M', aRegistry.getItem(base), 'S', OP.stickLong.dat(aMat), 'C', OD_CIRCUITS[6], 'B', "gt:re-battery1");
			scanItem(17260+i);

			aRegistry.add( aMat.getLocal() + " Boilder Wall"                                     , "Multiblock Machines", 17290 + i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  HARDNESS[i], NBT_RESISTANCE,  HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(1), aRegistry.getItem());
			aRegistry.add( aMat.getLocal() + " Steam Turbine Wall"                                     , "Multiblock Machines", 17320 + i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,  HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(1), aRegistry.getItem());
			aRegistry.add( aMat.getLocal() + " Dynamo Wall"                                     , "Multiblock Machines", 17350 + i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS[i], NBT_RESISTANCE,   HARDNESS[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(1), aRegistry.getItem());
		}

		for(int i=0;i<MT.DATA.Crucible_T.length;i++) {
			aMat = MT.DATA.Crucible_T[i];
			aRegistry.add("Large " + aMat.getLocal() + " Crucible"                                , "Multiblock Machines", 17800 + i, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   HARDNESS_C[i], NBT_RESISTANCE,  HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 1000 + i, NBT_ACIDPROOF, CS.ACID_C[i], NBT_MAXTEMPERATURE, CS.TEMP_C[i]*0.8), "hMy", 'M', aRegistry.getItem(1000 + i));
			scanItem(17800 + i);
			aRegistry.add( "Large " + aMat.getLocal() + " Crucible Wall"                                     , "Multiblock Machines", 17850 + i, 17101, aClass                                   , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  HARDNESS_C[i], NBT_RESISTANCE,  HARDNESS_C[i], NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "metalwalldense"          , NBT_DESIGNS, 7)); OM.data(aRegistry.getItem(), aMat, U*36); RM.Welder.addRecipe2(F, 64, 512, OP.plateDense.mat(aMat, 4), ST.tag(1), aRegistry.getItem());
		}

		/*
		aMat = MT.Steel;                aRegistry.add("Large Steel Crucible"                                , "Multiblock Machines", 17809, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18009, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18009));
		aMat = MT.StainlessSteel;       aRegistry.add("Large Stainless Steel Crucible"                      , "Multiblock Machines", 17802, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18002, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18002));
		aMat = MT.Invar;                aRegistry.add("Large Invar Crucible"                                , "Multiblock Machines", 17807, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18007, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18007));
		aMat = MT.Ti;                   aRegistry.add("Large Titanium Crucible"                             , "Multiblock Machines", 17806, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18006, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18006));
		aMat = MT.TungstenSteel;        aRegistry.add("Large Tungstensteel Crucible"                        , "Multiblock Machines", 17803, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18003, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18003));
		aMat = ANY.W;                   aRegistry.add("Large Tungsten Crucible"                             , "Multiblock Machines", 17804, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18004, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18004));
		aMat = MT.Ta4HfC5;              aRegistry.add("Large Tantalum Hafnium Carbide Crucible"             , "Multiblock Machines", 17812, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18012, NBT_ACIDPROOF, F), "hMy", 'M', aRegistry.getItem(18012));
		aMat = MT.Ad;                   aRegistry.add("Large Adamantium Crucible"                           , "Multiblock Machines", 17805, 17101, MultiTileEntityCrucible.class            , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "crucible"                , NBT_DESIGN, 18005, NBT_ACIDPROOF, T), "hMy", 'M', aRegistry.getItem(18005));
	*/

		aMat = MT.SteelGalvanized;      aRegistry.add("Logistics Core"                                      , "Logistics"          , 17997, 17997, MultiTileEntityLogisticsCore.class       , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "logisticscore"           , NBT_ENERGY_ACCEPTED, TD.Energy.EU), "CCC", "PMP", "CCC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Processor_Crystal_Emerald, 'C', OD_CIRCUITS[6]);
		scanItem(17997);
		aMat = ANY.W;                   aRegistry.add("Lightning Rod Electric Output"                       , "Multiblock Machines", 17998, 17101, MultiTileEntityLightningRod.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "lightningrod"            , NBT_ENERGY_EMITTED, TD.Energy.EU, NBT_CAPACITY, 18000 * VREC[6]), "CWC", "PMP", "CWC", 'M', OP.casingMachine.dat(aMat), 'W', OP.wireGt16.dat(MT.NiobiumTitanium), 'P', IL.Processor_Crystal_Sapphire, 'C', OD_CIRCUITS[6]);
		scanItem(17998);
		aMat = MT.Ti;                   aRegistry.add("Bedrock Mining Drill Controller"                     , "Multiblock Machines", 17999, 17101, MultiTileEntityBedrockDrill.class        , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "bedrockdrill"            , NBT_RECIPEMAP, RM.BedrockOreList, NBT_ENERGY_ACCEPTED, TD.Energy.RU), "PYP", "CMC", "GIG", 'M', OP.casingMachineDense.dat(aMat), 'G', OP.gearGt.dat(MT.TungstenSteel), 'I', OP.toolHeadDrill.dat(MT.TungstenSteel), 'P', IL.Processor_Crystal_Ruby, 'Y', IL.CONVEYERS[5], 'C', OD_CIRCUITS[6]);
		scanItem(17999);
	}

	public static void scanItem(int damage) {
		NBTTagCompound nbt = new NBTTagCompound();
		nbt.setInteger("scan", damage);
		ItemStack scanItem = IL.Tool_Multiblock_Builder.get(1);
		ItemStack scanedItem = scanItem.copy();
		scanedItem.setTagCompound(nbt);

		RM.ScannerVisuals.addRecipe(F, ST.array(Behavior_MultiblockBuilder.getGT6Tile("gt6.multitileentity", damage), scanItem), ST.array(scanedItem, Behavior_MultiblockBuilder.getGT6Tile("gt6.multitileentity", damage)), null, null, ZL_FS, ZL_FS, 64, 16, 0);
	}
}
